macro {

    fun tab(depth : Int): String {
        return "\t".repeat(depth)
    }

}

tokens {

    companion {
        skip    : [WHITESPACE] ;
    }

    fragments {
        LETTER  : "[a-zA-Z]" ;
        DIGIT   : "[0-9]" ;
        FIRST   : "($LETTER|_)" ;
    }

    WHITESPACE  : r"[ \r\n\t]" ;

    IFW         : "if" ;
    FORW        : "for" ;
    PASS        : "pass" ;
    BOTH        : "both" ;
    PRINTW      : "print" ;

    PLUS        : "+" ;
    MINUS       : "-" ;
    TIMES       : "*" ;
    DIV         : "/" ;

    NOT         : "!" ;
    XOR         : "^" ;
    AND         : "&" ;
    OR          : "|" ;

    GE          : ">=" ;
    GT          : ">" ;
    LE          : "<=" ;
    LT          : "<" ;
    EQ          : "==" ;
    NE          : "!=" ;

    ASSIGN      : "=" ;

    VAR         : r"$FIRST($FIRST|$DIGIT)*" ;
    UINT        : r"$DIGIT*" ;

}

grammar {

    companion {
        synthesis {
            view : String :: { default = @1.view } ;
        }
        inheritance {
            depth : Int :: { default = @.depth } ;
        }
        compute {
            tab : String :: { default = @macro.tab(depth) } ;
        }
        start : main ;
    }

    main                    : code :: { view = "fun main() {\n${@1.view}}\n" } ;

    code                    : codeBlock{ depth = 1 } code :: { view = "${@1.view}${@2.view}" }
                            | EPSILON :: { view = "" } ;
    codeBlock               : statement
                            | ifBlock
                            | forBlock
                            | PASS :: { view = "\n" } ;

    statement :: { view = "$tab${@1.view}" }
                            : print
                            | assignment ;
    print                   : PRINTW expression :: { view = "print(${@2.view})\n" } ;
    assignment              : ASSIGN VAR expression :: { view = "$@2 = ${@3.view}\n" } ;

    ifBlock                 : IFW logicalExpression innerBody{ depth = @.depth + 1 } innerBody{ depth = @.depth + 1 } :: { view = "${tab}if (${@1.view}) {\n${@3.view}${tab}} else {\n${@4.view}${tab}}" } ;
    forBlock                : FORW VAR arithmeticAtom arithmeticAtom innerBody{ depth = @.depth + 1 } :: { view = "${tab}for ($@2 in ${@3.view}..${@4.view}) {\n${@5.view}${tab}}" } ;
    innerBody               : codeBlock
                            | BOTH codeBlock innerBody :: { view = "${@2.view}${@3.view}" } ;

    expression              : logicalExpression
                            | arithmeticExpression ;

    logicalBinop :: { view = @1.STRING }
                            : AND
                            | OR
                            | XOR ;
    logicalUnop :: { view = @1.STRING }
                            : NOT ;
    logicalExpression       : logicalBinop logicalExpression logicalExpression :: { view = "(${@2.view} ${@1.view} ${@3.view})" }
                            | logicalUnop logicalExpression :: { view = "${@1.view}${@2.view}" }
                            | logicalAtom ;
    logicalAtom             : VAR :: { view = @1.STRING }
                            | comparison ;

    relation :: { view = @1.STRING }
                            : EQ
                            | NE
                            | GT
                            | GE
                            | LT
                            | LE ;
    comparison              : relation arithmeticExpression arithmeticExpression :: { view = "(${@2.view} ${@1.view} ${@3.view})" } ;

    arithmeticBinop :: { view = @1.STRING }
                            : PLUS
                            | MINUS
                            | TIMES
                            | DIV ;
    arithmeticExpression    : arithmeticBinop arithmeticExpression arithmeticExpression :: { view ="(${@2.view} ${@1.view} ${@3.view})" }
                            | arithmeticAtom ;
    arithmeticAtom :: { view = @1.STRING }
                            : VAR
                            | UINT ;

}