package translate.codegen

import grammar.Expansion
import grammar.Grammar
import grammar.token.Token
import structure.ASTNode
import structure.Visitor
import translate.codegen.info.GrammarInfo
import translate.codegen.info.VisitorInfo
import translate.meta.MetaBaseVisitor
import translate.meta.MetaGrammarInfo
import translate.meta.MetaVisitorInfo
import translate.test.loc
import utils.Beautifier

class VisitorInfoBuilder(
    private val packageName: String,
    private val objectName: String,
    private val grammarInfoObjectName: String
) : MetaBaseVisitor<String> {

    data class Attribute(val name: String, val type: String) {
        override fun toString(): String {
            return "$name: $type"
        }
    }

    data class ComputedAttribute(val name: String, val type: String, val init: String) {
        override fun toString(): String {
            return "fun $name(): $type = $init"
        }
    }

    val synthesis = mutableListOf<Attribute>()
    val inheritance = mutableListOf<Attribute>()
    val compute = mutableListOf<ComputedAttribute>()

    override fun <T : Token> visitTerminal(token: T): String {
        return token.getText()
    }

    override fun <T : Token> collect(root: ASTNode<T>): String {
        val collected = visit(root)
        return Beautifier.detabify(
            """/**
This code is generated by [${VisitorInfoBuilder::class.qualifiedName}]
deriving from base class [${MetaBaseVisitor::class.qualifiedName}] generated by [${MetaVisitorInfo::class.qualifiedName}]
*/

package $packageName

import java.io.File

import ${Token::class.qualifiedName}
import ${Grammar::class.qualifiedName}
import ${Expansion::class.qualifiedName}
import ${Beautifier::class.qualifiedName}

import ${ASTNode::class.qualifiedName}
import ${Visitor::class.qualifiedName}

import ${VisitorInfo::class.qualifiedName}
import ${GrammarInfo::class.qualifiedName}

class ${objectName}Data(${inheritance.joinToString(", ") { "val $it" }}) {
${synthesis.joinToString("\n") { "\tlateinit val $it" }}
${compute.joinToString("\n") { "\t$it" }}
}
    
class ${objectName}TerminalNode<T : Token>(token: T${inheritance.joinToString("") { ", $it" }}) : 
    ${ASTNode::class.simpleName}.${ASTNode.TerminalNode::class.simpleName}<T>(token) {
    val data = ${objectName}Data(${inheritance.joinToString(", ") { it.name }})
}
    
class ${objectName}InnerNode<T : Token>(token: T, expansion: Expansion${inheritance.joinToString("") { ", $it" }}) : 
    ${ASTNode::class.simpleName}.${ASTNode.InnerNode::class.simpleName}<T>(token, expansion) {
    val data = ${objectName}Data(${inheritance.joinToString(", ") { it.name }})    
}

fun main() {
    File("${Beautifier.escape(loc)}\\src\\gen\\${objectName}Generated.kt").bufferedWriter().use { out ->
        out.write($objectName.getAll())
    }
}

object $objectName : ${VisitorInfo::class.simpleName} {

    private val grammarInfo = $grammarInfoObjectName
    private val packageName = "$packageName"
    private val className = "${objectName}Generated"
    
    override fun getDefinedTokens(): List<${Token::class.simpleName}> {
        return grammarInfo.getDefinedTokens()
    }
    
    override fun getFullName(token: ${Token::class.simpleName}): String {
        return "${"$"}{$grammarInfoObjectName.getName()}.${"$"}token"
    }
    
    override fun getNodeType(token: ${Token::class.simpleName}): String {
        return when (token) {
            is ${Token::class.simpleName}.${Token.StateToken::class.simpleName} -> 
                "${objectName}InnerNode<${"$"}{getFullName(token)}>"
            is ${Token::class.simpleName}.${Token.DataToken::class.simpleName} -> 
                "${objectName}TerminalNode<${"$"}{getFullName(token)}>"
            is ${Token::class.simpleName}.${Token.VariantToken::class.simpleName} -> 
                "${"${objectName}TerminalNode<${Token::class.simpleName}" +
                    ".${Token.VariantToken::class.simpleName}" +
                    ".${Token.VariantToken.VariantInstanceToken::class.simpleName}" +
                    "<${"$"}{getFullName(token)}>>"}"
            else -> throw IllegalArgumentException("Unexpected token ${"$"}token type")
        }
    }
    
    override fun getVisitMethods(token: ${Token::class.simpleName}): String {
        return when (token) {
            is ${Token::class.simpleName}.${Token.StateToken::class.simpleName} -> getStateVisitMethods(token)
            else -> getTerminalVisitMethods(token)
        }
    }
    
    private fun getStateVisitMethods(token: ${Token::class.simpleName}.${Token.StateToken::class.simpleName}): String {
        val expansions = grammarInfo.getGrammar().RULES[token].expansions
        return if (expansions.size == 1) {
            ""${'"'}
    /**
    ${"$"}token -> ${"$"}{expansions.first()}
    */
    fun visit_${"$"}{token}(node: ${"$"}{getNodeType(token)}): ${objectName}Data""${'"'}
        } else {
            ""${'"'}
    fun visit_${"$"}{token}(node: ${"$"}{getNodeType(token)}): ${objectName}Data {
        return when (val id = node.getExpansion().getId()) {
${"$"}{expansions.joinToString("\n") { "\t\t\t${"$"}{it.getId()} -> visit_${"$"}{token}_${"$"}{it.getId()}(node)" }}
            else -> throw IllegalStateException("Unexpected expansion id ${"$"}{"${"$"}"}id in expansion of ${"$"}token")
        }
    }
${"$"}{expansions.joinToString("\n") {
                ""${'"'}
    /**
    ${"$"}token -> ${"$"}it
    */
    fun visit_${"$"}{token}_${"$"}{it.getId()}(node: ${"$"}{getNodeType(token)}): ${objectName}Data""${'"'}
            }}""${'"'}
        }
    }

    private fun getTerminalVisitMethods(token: Token): String {
        return ""${'"'}
    fun visit_${"$"}{token}(node: ${"$"}{getNodeType(token)}): ${objectName}Data {
        return visitTerminal(node.getToken())
    }""${'"'}
    }
    
    override fun getAll(): String {
        return Beautifier.detabify(
            ""${'"'}/**
This code is generated by [${"$"}{$objectName::class.qualifiedName}] derived from [${"$"}{VisitorInfo::class.qualifiedName}]
based on grammar description [${MetaGrammarInfo::class.qualifiedName}] derived from [${"$"}{GrammarInfo::class.qualifiedName}]
*/

package ${"$"}packageName

import ${"$"}{Visitor::class.qualifiedName}
import ${"$"}{ASTNode::class.qualifiedName}
import ${"$"}{Token::class.qualifiedName}
import ${"$"}packageName.${"$"}{grammarInfo.getName()}

@Suppress("UNCHECKED_CAST")
interface ${"$"}className : ${"$"}{Visitor::class.simpleName}<${objectName}Data> {

/*
${"$"}{grammarInfo.getGrammar()}
*/

    override fun visit(node: ${ASTNode::class.simpleName}<out ${Token::class.simpleName}>): ${objectName}Data {${"$"}{getChoiceVisit()}
    }
    
    fun <T : ${Token::class.simpleName}> visitTerminal(token: T): ${objectName}Data
    
${"$"}{getVisitMethods()}

}""${'"'}
        )
    }
    
$collected
}
"""
        )
    }

    /**
    all -> m t g
     */
    override fun visit_all(node: ASTNode.InnerNode<MetaGrammarInfo.all>): String {
        return ""
    }

    /**
    m -> MACRO LPAREN kfPlus RPAREN
     */
    override fun visit_m_0(node: ASTNode.InnerNode<MetaGrammarInfo.m>): String {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    /**
    m -> <eps>
     */
    override fun visit_m_1(node: ASTNode.InnerNode<MetaGrammarInfo.m>): String {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    /**
    t -> TOKENS LPAREN tComp tFrag tPlus RPAREN
     */
    override fun visit_t(node: ASTNode.InnerNode<MetaGrammarInfo.t>): String {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    /**
    g -> GRAMMAR LPAREN gComp gPlus RPAREN
     */
    override fun visit_g(node: ASTNode.InnerNode<MetaGrammarInfo.g>): String {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    /**
    kfPlus -> KOTLIN_FUNC kfPlus
     */
    override fun visit_kfPlus_0(node: ASTNode.InnerNode<MetaGrammarInfo.kfPlus>): String {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    /**
    kfPlus -> <eps>
     */
    override fun visit_kfPlus_1(node: ASTNode.InnerNode<MetaGrammarInfo.kfPlus>): String {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    /**
    tComp -> COMPANION LPAREN tSkip RPAREN
     */
    override fun visit_tComp_0(node: ASTNode.InnerNode<MetaGrammarInfo.tComp>): String {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    /**
    tComp -> <eps>
     */
    override fun visit_tComp_1(node: ASTNode.InnerNode<MetaGrammarInfo.tComp>): String {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    /**
    tFrag -> FRAGMENTS LPAREN tFragPlus RPAREN
     */
    override fun visit_tFrag_0(node: ASTNode.InnerNode<MetaGrammarInfo.tFrag>): String {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    /**
    tFrag -> <eps>
     */
    override fun visit_tFrag_1(node: ASTNode.InnerNode<MetaGrammarInfo.tFrag>): String {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    /**
    tPlus -> tLine tPlus
     */
    override fun visit_tPlus_0(node: ASTNode.InnerNode<MetaGrammarInfo.tPlus>): String {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    /**
    tPlus -> <eps>
     */
    override fun visit_tPlus_1(node: ASTNode.InnerNode<MetaGrammarInfo.tPlus>): String {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    /**
    tSkip -> SKIP DESCRIBE tArray EOLN
     */
    override fun visit_tSkip(node: ASTNode.InnerNode<MetaGrammarInfo.tSkip>): String {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    /**
    tArray -> LARRAY CAPSNAME tArrayPlus RARRAY
     */
    override fun visit_tArray(node: ASTNode.InnerNode<MetaGrammarInfo.tArray>): String {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    /**
    tArrayPlus -> SEP CAPSNAME tArrayPlus
     */
    override fun visit_tArrayPlus_0(node: ASTNode.InnerNode<MetaGrammarInfo.tArrayPlus>): String {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    /**
    tArrayPlus -> <eps>
     */
    override fun visit_tArrayPlus_1(node: ASTNode.InnerNode<MetaGrammarInfo.tArrayPlus>): String {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    /**
    tFragPlus -> tFragLine tFragPlus
     */
    override fun visit_tFragPlus_0(node: ASTNode.InnerNode<MetaGrammarInfo.tFragPlus>): String {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    /**
    tFragPlus -> <eps>
     */
    override fun visit_tFragPlus_1(node: ASTNode.InnerNode<MetaGrammarInfo.tFragPlus>): String {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    /**
    tFragLine -> CAPSNAME DESCRIBE STRING EOLN
     */
    override fun visit_tFragLine(node: ASTNode.InnerNode<MetaGrammarInfo.tFragLine>): String {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    /**
    tLine -> CAPSNAME DESCRIBE tDef EOLN
     */
    override fun visit_tLine(node: ASTNode.InnerNode<MetaGrammarInfo.tLine>): String {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    /**
    tDef -> STRING
     */
    override fun visit_tDef_0(node: ASTNode.InnerNode<MetaGrammarInfo.tDef>): String {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    /**
    tDef -> RSTRING
     */
    override fun visit_tDef_1(node: ASTNode.InnerNode<MetaGrammarInfo.tDef>): String {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    /**
    tDef -> LTRIG CHAR CHARRANGE CHAR RTRIG
     */
    override fun visit_tDef_2(node: ASTNode.InnerNode<MetaGrammarInfo.tDef>): String {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    /**
    gComp -> COMPANION LPAREN gSynth gInh gCompv gStart RPAREN
     */
    override fun visit_gComp(node: ASTNode.InnerNode<MetaGrammarInfo.gComp>): String {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    /**
    gPlus -> gLine gPlus
     */
    override fun visit_gPlus_0(node: ASTNode.InnerNode<MetaGrammarInfo.gPlus>): String {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    /**
    gPlus -> <eps>
     */
    override fun visit_gPlus_1(node: ASTNode.InnerNode<MetaGrammarInfo.gPlus>): String {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    /**
    gSynth -> SYNTHESIS LPAREN attribs RPAREN
     */
    override fun visit_gSynth_0(node: ASTNode.InnerNode<MetaGrammarInfo.gSynth>): String {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    /**
    gSynth -> <eps>
     */
    override fun visit_gSynth_1(node: ASTNode.InnerNode<MetaGrammarInfo.gSynth>): String {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    /**
    gInh -> INHERITANCE LPAREN attribs RPAREN
     */
    override fun visit_gInh_0(node: ASTNode.InnerNode<MetaGrammarInfo.gInh>): String {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    /**
    gInh -> <eps>
     */
    override fun visit_gInh_1(node: ASTNode.InnerNode<MetaGrammarInfo.gInh>): String {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    /**
    gCompv -> COMPUTE LPAREN attribs RPAREN
     */
    override fun visit_gCompv_0(node: ASTNode.InnerNode<MetaGrammarInfo.gCompv>): String {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    /**
    gCompv -> <eps>
     */
    override fun visit_gCompv_1(node: ASTNode.InnerNode<MetaGrammarInfo.gCompv>): String {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    /**
    gStart -> START DESCRIBE CAMELNAME EOLN
     */
    override fun visit_gStart(node: ASTNode.InnerNode<MetaGrammarInfo.gStart>): String {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    /**
    attribs -> attrib attribsPlus
     */
    override fun visit_attribs(node: ASTNode.InnerNode<MetaGrammarInfo.attribs>): String {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    /**
    attrib -> CAMELNAME DESCRIBE type setDef EOLN
     */
    override fun visit_attrib(node: ASTNode.InnerNode<MetaGrammarInfo.attrib>): String {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    /**
    attribsPlus -> attrib attribsPlus
     */
    override fun visit_attribsPlus_0(node: ASTNode.InnerNode<MetaGrammarInfo.attribsPlus>): String {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    /**
    attribsPlus -> <eps>
     */
    override fun visit_attribsPlus_1(node: ASTNode.InnerNode<MetaGrammarInfo.attribsPlus>): String {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    /**
    type -> INT_TYPE
     */
    override fun visit_type_0(node: ASTNode.InnerNode<MetaGrammarInfo.type>): String {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    /**
    type -> DOUBLE_TYPE
     */
    override fun visit_type_1(node: ASTNode.InnerNode<MetaGrammarInfo.type>): String {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    /**
    type -> STRING_TYPE
     */
    override fun visit_type_2(node: ASTNode.InnerNode<MetaGrammarInfo.type>): String {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    /**
    setDef -> DEFINE LPAREN DEFAULT ASSIGN defValue RPAREN
     */
    override fun visit_setDef_0(node: ASTNode.InnerNode<MetaGrammarInfo.setDef>): String {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    /**
    setDef -> <eps>
     */
    override fun visit_setDef_1(node: ASTNode.InnerNode<MetaGrammarInfo.setDef>): String {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    /**
    defValue -> STRING
     */
    override fun visit_defValue_0(node: ASTNode.InnerNode<MetaGrammarInfo.defValue>): String {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    /**
    defValue -> defTerm defMod
     */
    override fun visit_defValue_1(node: ASTNode.InnerNode<MetaGrammarInfo.defValue>): String {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    /**
    defValue -> SUB defTerm
     */
    override fun visit_defValue_2(node: ASTNode.InnerNode<MetaGrammarInfo.defValue>): String {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    /**
    gLine -> CAMELNAME def DESCRIBE rules EOLN
     */
    override fun visit_gLine(node: ASTNode.InnerNode<MetaGrammarInfo.gLine>): String {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    /**
    def -> DEFINE LPAREN defBody RPAREN
     */
    override fun visit_def_0(node: ASTNode.InnerNode<MetaGrammarInfo.def>): String {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    /**
    def -> <eps>
     */
    override fun visit_def_1(node: ASTNode.InnerNode<MetaGrammarInfo.def>): String {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    /**
    rules -> rule rulesPlus
     */
    override fun visit_rules(node: ASTNode.InnerNode<MetaGrammarInfo.rules>): String {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    /**
    rule -> seq def
     */
    override fun visit_rule(node: ASTNode.InnerNode<MetaGrammarInfo.rule>): String {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    /**
    rulesPlus -> CHOICE rule rulesPlus
     */
    override fun visit_rulesPlus_0(node: ASTNode.InnerNode<MetaGrammarInfo.rulesPlus>): String {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    /**
    rulesPlus -> <eps>
     */
    override fun visit_rulesPlus_1(node: ASTNode.InnerNode<MetaGrammarInfo.rulesPlus>): String {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    /**
    seq -> atom seqPlus
     */
    override fun visit_seq(node: ASTNode.InnerNode<MetaGrammarInfo.seq>): String {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    /**
    atom -> CAPSNAME
     */
    override fun visit_atom_0(node: ASTNode.InnerNode<MetaGrammarInfo.atom>): String {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    /**
    atom -> CAMELNAME pass
     */
    override fun visit_atom_1(node: ASTNode.InnerNode<MetaGrammarInfo.atom>): String {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    /**
    seqPlus -> atom seqPlus
     */
    override fun visit_seqPlus_0(node: ASTNode.InnerNode<MetaGrammarInfo.seqPlus>): String {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    /**
    seqPlus -> <eps>
     */
    override fun visit_seqPlus_1(node: ASTNode.InnerNode<MetaGrammarInfo.seqPlus>): String {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    /**
    pass -> LPAREN defBody RPAREN
     */
    override fun visit_pass_0(node: ASTNode.InnerNode<MetaGrammarInfo.pass>): String {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    /**
    pass -> <eps>
     */
    override fun visit_pass_1(node: ASTNode.InnerNode<MetaGrammarInfo.pass>): String {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    /**
    defBody -> defAtom defPlus
     */
    override fun visit_defBody(node: ASTNode.InnerNode<MetaGrammarInfo.defBody>): String {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    /**
    defAtom -> CAMELNAME ASSIGN defValue
     */
    override fun visit_defAtom(node: ASTNode.InnerNode<MetaGrammarInfo.defAtom>): String {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    /**
    defPlus -> SEP defAtom defPlus
     */
    override fun visit_defPlus_0(node: ASTNode.InnerNode<MetaGrammarInfo.defPlus>): String {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    /**
    defPlus -> <eps>
     */
    override fun visit_defPlus_1(node: ASTNode.InnerNode<MetaGrammarInfo.defPlus>): String {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    /**
    defTerm -> atName
     */
    override fun visit_defTerm_0(node: ASTNode.InnerNode<MetaGrammarInfo.defTerm>): String {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    /**
    defTerm -> INT
     */
    override fun visit_defTerm_1(node: ASTNode.InnerNode<MetaGrammarInfo.defTerm>): String {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    /**
    defTerm -> DOUBLE
     */
    override fun visit_defTerm_2(node: ASTNode.InnerNode<MetaGrammarInfo.defTerm>): String {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    /**
    defMod -> op defTerm
     */
    override fun visit_defMod_0(node: ASTNode.InnerNode<MetaGrammarInfo.defMod>): String {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    /**
    defMod -> <eps>
     */
    override fun visit_defMod_1(node: ASTNode.InnerNode<MetaGrammarInfo.defMod>): String {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    /**
    atName -> SPNAME
     */
    override fun visit_atName_0(node: ASTNode.InnerNode<MetaGrammarInfo.atName>): String {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    /**
    atName -> CAMELNAME
     */
    override fun visit_atName_1(node: ASTNode.InnerNode<MetaGrammarInfo.atName>): String {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    /**
    op -> ADD
     */
    override fun visit_op_0(node: ASTNode.InnerNode<MetaGrammarInfo.op>): String {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    /**
    op -> SUB
     */
    override fun visit_op_1(node: ASTNode.InnerNode<MetaGrammarInfo.op>): String {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    /**
    op -> MUL
     */
    override fun visit_op_2(node: ASTNode.InnerNode<MetaGrammarInfo.op>): String {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    /**
    op -> DIV
     */
    override fun visit_op_3(node: ASTNode.InnerNode<MetaGrammarInfo.op>): String {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

}