package translate.codegen

import translate.codegen.info.GrammarInfo
import translate.codegen.info.VisitorInfo
import translate.meta.MetaVisitorInfo
import utils.Beautifier.Companion.detabify
import java.io.File

class AbstractVisitorBuilder(
    private val grammarInfo: GrammarInfo,
    private val visitorInfo: VisitorInfo,
    private val packageName: String,
    private val className: String
) {

    fun buildVisitor(output: File) {
        output.bufferedWriter().use { out ->
            out.write(
                detabify(
                    """/**
This code is generated by [translate.codegen.AbstractVisitorBuilder] by provided [translate.codegen.info.Description]
*/

package $packageName

import structure.Visitor
import structure.ASTNode
import grammar.token.Token
import $packageName.${grammarInfo.getName()}

@Suppress("UNCHECKED_CAST")
interface $className<R> : Visitor<R> {

/*
${grammarInfo.getGrammar()}
*/

    override fun visit(node: ASTNode<out Token>): R {${visitorInfo.getChoiceVisit()}
    }
    
    abstract fun <T : Token> visitTerminal(token: T): R
    
${visitorInfo.getVisitMethods()}

}
"""
                )
            )
        }
    }

}