package translate.meta

import grammar.token.Token
import structure.ASTNode
import structure.Visitor
import translate.codegen.info.GrammarInfo
import translate.codegen.info.VisitorInfo
import utils.Beautifier

object MetaVisitorInfo : VisitorInfo {

    private val grammarInfo = MetaGrammarInfo
    private val packageName = "translate.meta"
    private val className = "MetaBaseVisitor"

    override fun getDefinedTokens(): List<Token> {
        return grammarInfo.getDefinedTokens()
    }

    override fun getFullName(token: Token): String {
        return "${grammarInfo.getName()}.$token"
    }

    override fun getNodeType(token: Token): String {
        return when (token) {
            is Token.StateToken -> "${ASTNode::class.simpleName}.${ASTNode.InnerNode::class.simpleName}" +
                    "<${getFullName(token)}>"
            is Token.DataToken -> "${ASTNode::class.simpleName}.${ASTNode.TerminalNode::class.simpleName}" +
                    "<${getFullName(token)}>"
            is Token.VariantToken -> "${ASTNode::class.simpleName}.${ASTNode.TerminalNode::class.simpleName}" +
                    "<${Token::class.simpleName}" +
                    ".${Token.VariantToken::class.simpleName}" +
                    ".${Token.VariantToken.VariantInstanceToken::class.simpleName}<${getFullName(token)}>>"
            else -> throw IllegalArgumentException("Unexpected token $token type")
        }
    }

    override fun getVisitMethods(token: Token): String {
        return when (token) {
            is Token.StateToken -> getStateVisitMethods(token)
            else -> getTerminalVisitMethods(token)
        }
    }

    override fun getAll(): String {
        return Beautifier.detabify(
            """/**
This code is generated by [${MetaVisitorInfo::class.qualifiedName}] derived from [${VisitorInfo::class.qualifiedName}]
based on grammar description [${MetaGrammarInfo::class.qualifiedName}] derived from [${GrammarInfo::class.qualifiedName}]
*/

package $packageName

import ${Visitor::class.qualifiedName}
import ${ASTNode::class.qualifiedName}
import ${Token::class.qualifiedName}
import $packageName.${grammarInfo.getName()}

@Suppress("UNCHECKED_CAST")
interface $className<R> : ${Visitor::class.simpleName}<R> {

/*
${grammarInfo.getGrammar()}
*/

    override fun visit(node: ${ASTNode::class.simpleName}<out ${Token::class.simpleName}>): R {${getChoiceVisit()}
    }
    
    fun <T : ${Token::class.simpleName}> visitTerminal(token: T): R
    
${getVisitMethods()}

}"""
        )
    }

    private fun getStateVisitMethods(token: Token.StateToken): String {
        val expansions = grammarInfo.getGrammar().RULES[token].expansions
        return if (expansions.size == 1) {
            """
    /**
    $token -> ${expansions.first()}
    */
    fun visit_${token}(node: ${getNodeType(token)}): R"""
        } else {
            """
    fun visit_${token}(node: ${getNodeType(token)}): R {
        return when (val id = node.getExpansion().getId()) {
${expansions.joinToString("\n") { "\t\t\t${it.getId()} -> visit_${token}_${it.getId()}(node)" }}
            else -> throw IllegalStateException("Unexpected expansion id ${"$"}id in expansion of $token")
        }
    }
${expansions.joinToString("\n") {
                """
    /**
    $token -> $it
    */
    fun visit_${token}_${it.getId()}(node: ${getNodeType(token)}): R"""
            }}"""
        }
    }

    private fun getTerminalVisitMethods(token: Token): String {
        return """
    fun visit_${token}(node: ${getNodeType(token)}): R {
        return visitTerminal(node.getToken())
    }"""
    }

}