/**
This code is generated by [translate.codegen.VisitorBuilder] by provided [structure.Description]
*/

package translate.meta

import structure.Visitor
import structure.ASTNode
import grammar.token.Token
import translate.meta.MetaDescription

@Suppress("UNCHECKED_CAST")
abstract class MetaBaseVisitor<R> : Visitor<R> {

/*
Start: all
all -> m t g
m -> macro { kfPlus } | <eps>
kfPlus -> re((\t| {4})fun .* \{(\n|\r\n)(\1.*\2)+\1}) kfPlus | <eps>
t -> tokens { tComp tFrag tPlus }
tComp -> companion { tSkip } | <eps>
tSkip -> skip : tArray ;
tArray -> [ re([A-Z]+) tArrayPlus ]
tArrayPlus -> , re([A-Z]+) tArrayPlus | <eps>
tFrag -> fragments { tPlus } | <eps>
tPlus -> tLine tPlus | <eps>
tLine -> re([A-Z]+) : tDef ;
tDef -> re(\"[^\"]*\") | re(r\"[^\"]*\") | < re('[^']') .. re('[^']') >
g -> grammar { gComp gPlus }
gComp -> companion { gSynth gInh gCompv gStart }
gSynth -> synthesis { attribs } | <eps>
gInh -> inheritance { attribs } | <eps>
gCompv -> compute { attribs } | <eps>
gStart -> start : re([a-z]+([A-Z][a-z]*)*) ;
attribs -> attrib attribsPlus
attrib -> re([a-z]+([A-Z][a-z]*)*) : type setDef ;
type -> Int | Double | String
setDef -> :: { default = defValue } | <eps>
attribsPlus -> attrib attribsPlus | <eps>
gPlus -> gLine gPlus | <eps>
gLine -> re([a-z]+([A-Z][a-z]*)*) def : rules ;
rules -> rule rulesPlus
rule -> seq def
seq -> atom seqPlus
atom -> re([A-Z]+) | re([a-z]+([A-Z][a-z]*)*) pass
pass -> { defBody } | <eps>
seqPlus -> atom seqPlus | <eps>
rulesPlus -> | rule rulesPlus | <eps>
def -> :: { defBody } | <eps>
defBody -> defAtom defPlus
defAtom -> re([a-z]+([A-Z][a-z]*)*) = defValue
defValue -> re(\"[^\"]*\") | defTerm defMod | - defTerm
defTerm -> atName | re((0|[1-9]\d*)) | re((0|[1-9]\d*)\.\d*)
defMod -> op defTerm | <eps>
op -> + | - | * | /
atName -> re(@(\d*|macro)\.[a-zA-Z()]+) | re([a-z]+([A-Z][a-z]*)*)
defPlus -> , defAtom defPlus | <eps>
*/

    override fun <T : Token> visit(node: ASTNode<T>): R {
        return when(node.getToken()) {
			MetaDescription.LPAREN -> visit_LPAREN(node as ASTNode.TerminalNode<MetaDescription.LPAREN>)
			MetaDescription.RPAREN -> visit_RPAREN(node as ASTNode.TerminalNode<MetaDescription.RPAREN>)
			MetaDescription.EOLN -> visit_EOLN(node as ASTNode.TerminalNode<MetaDescription.EOLN>)
			MetaDescription.DEFINE -> visit_DEFINE(node as ASTNode.TerminalNode<MetaDescription.DEFINE>)
			MetaDescription.DESCRIBE -> visit_DESCRIBE(node as ASTNode.TerminalNode<MetaDescription.DESCRIBE>)
			MetaDescription.CHOICE -> visit_CHOICE(node as ASTNode.TerminalNode<MetaDescription.CHOICE>)
			MetaDescription.LTRIG -> visit_LTRIG(node as ASTNode.TerminalNode<MetaDescription.LTRIG>)
			MetaDescription.RTRIG -> visit_RTRIG(node as ASTNode.TerminalNode<MetaDescription.RTRIG>)
			MetaDescription.CHARRANGE -> visit_CHARRANGE(node as ASTNode.TerminalNode<MetaDescription.CHARRANGE>)
			MetaDescription.ASSIGN -> visit_ASSIGN(node as ASTNode.TerminalNode<MetaDescription.ASSIGN>)
			MetaDescription.ADD -> visit_ADD(node as ASTNode.TerminalNode<MetaDescription.ADD>)
			MetaDescription.SUB -> visit_SUB(node as ASTNode.TerminalNode<MetaDescription.SUB>)
			MetaDescription.MUL -> visit_MUL(node as ASTNode.TerminalNode<MetaDescription.MUL>)
			MetaDescription.DIV -> visit_DIV(node as ASTNode.TerminalNode<MetaDescription.DIV>)
			MetaDescription.LARRAY -> visit_LARRAY(node as ASTNode.TerminalNode<MetaDescription.LARRAY>)
			MetaDescription.RARRAY -> visit_RARRAY(node as ASTNode.TerminalNode<MetaDescription.RARRAY>)
			MetaDescription.SEP -> visit_SEP(node as ASTNode.TerminalNode<MetaDescription.SEP>)
			MetaDescription.MACRO -> visit_MACRO(node as ASTNode.TerminalNode<MetaDescription.MACRO>)
			MetaDescription.TOKENS -> visit_TOKENS(node as ASTNode.TerminalNode<MetaDescription.TOKENS>)
			MetaDescription.GRAMMAR -> visit_GRAMMAR(node as ASTNode.TerminalNode<MetaDescription.GRAMMAR>)
			MetaDescription.FRAGMENTS -> visit_FRAGMENTS(node as ASTNode.TerminalNode<MetaDescription.FRAGMENTS>)
			MetaDescription.COMPANION -> visit_COMPANION(node as ASTNode.TerminalNode<MetaDescription.COMPANION>)
			MetaDescription.SKIP -> visit_SKIP(node as ASTNode.TerminalNode<MetaDescription.SKIP>)
			MetaDescription.SYNTHESIS -> visit_SYNTHESIS(node as ASTNode.TerminalNode<MetaDescription.SYNTHESIS>)
			MetaDescription.INHERITANCE -> visit_INHERITANCE(node as ASTNode.TerminalNode<MetaDescription.INHERITANCE>)
			MetaDescription.COMPUTE -> visit_COMPUTE(node as ASTNode.TerminalNode<MetaDescription.COMPUTE>)
			MetaDescription.START -> visit_START(node as ASTNode.TerminalNode<MetaDescription.START>)
			MetaDescription.DEFAULT -> visit_DEFAULT(node as ASTNode.TerminalNode<MetaDescription.DEFAULT>)
			MetaDescription.INT_TYPE -> visit_INT_TYPE(node as ASTNode.TerminalNode<MetaDescription.INT_TYPE>)
			MetaDescription.DOUBLE_TYPE -> visit_DOUBLE_TYPE(node as ASTNode.TerminalNode<MetaDescription.DOUBLE_TYPE>)
			MetaDescription.STRING_TYPE -> visit_STRING_TYPE(node as ASTNode.TerminalNode<MetaDescription.STRING_TYPE>)
			MetaDescription.KOTLIN_FUNC -> visit_KOTLIN_FUNC(node as ASTNode.TerminalNode<MetaDescription.KOTLIN_FUNC>)
			MetaDescription.DOUBLE -> visit_DOUBLE(node as ASTNode.TerminalNode<MetaDescription.DOUBLE>)
			MetaDescription.INT -> visit_INT(node as ASTNode.TerminalNode<MetaDescription.INT>)
			MetaDescription.CHAR -> visit_CHAR(node as ASTNode.TerminalNode<MetaDescription.CHAR>)
			MetaDescription.STRING -> visit_STRING(node as ASTNode.TerminalNode<MetaDescription.STRING>)
			MetaDescription.RSTRING -> visit_RSTRING(node as ASTNode.TerminalNode<MetaDescription.RSTRING>)
			MetaDescription.SPNAME -> visit_SPNAME(node as ASTNode.TerminalNode<MetaDescription.SPNAME>)
			MetaDescription.CAMELNAME -> visit_CAMELNAME(node as ASTNode.TerminalNode<MetaDescription.CAMELNAME>)
			MetaDescription.CAPSNAME -> visit_CAPSNAME(node as ASTNode.TerminalNode<MetaDescription.CAPSNAME>)
			MetaDescription.WHITESPACE -> visit_WHITESPACE(node as ASTNode.TerminalNode<MetaDescription.WHITESPACE>)
			MetaDescription.all -> visit_all(node as ASTNode.InnerNode<MetaDescription.all>)
			MetaDescription.m -> visit_m(node as ASTNode.InnerNode<MetaDescription.m>)
			MetaDescription.t -> visit_t(node as ASTNode.InnerNode<MetaDescription.t>)
			MetaDescription.g -> visit_g(node as ASTNode.InnerNode<MetaDescription.g>)
			MetaDescription.kfPlus -> visit_kfPlus(node as ASTNode.InnerNode<MetaDescription.kfPlus>)
			MetaDescription.tComp -> visit_tComp(node as ASTNode.InnerNode<MetaDescription.tComp>)
			MetaDescription.tFrag -> visit_tFrag(node as ASTNode.InnerNode<MetaDescription.tFrag>)
			MetaDescription.tPlus -> visit_tPlus(node as ASTNode.InnerNode<MetaDescription.tPlus>)
			MetaDescription.tSkip -> visit_tSkip(node as ASTNode.InnerNode<MetaDescription.tSkip>)
			MetaDescription.tArray -> visit_tArray(node as ASTNode.InnerNode<MetaDescription.tArray>)
			MetaDescription.tArrayPlus -> visit_tArrayPlus(node as ASTNode.InnerNode<MetaDescription.tArrayPlus>)
			MetaDescription.tLine -> visit_tLine(node as ASTNode.InnerNode<MetaDescription.tLine>)
			MetaDescription.tDef -> visit_tDef(node as ASTNode.InnerNode<MetaDescription.tDef>)
			MetaDescription.gComp -> visit_gComp(node as ASTNode.InnerNode<MetaDescription.gComp>)
			MetaDescription.gPlus -> visit_gPlus(node as ASTNode.InnerNode<MetaDescription.gPlus>)
			MetaDescription.gSynth -> visit_gSynth(node as ASTNode.InnerNode<MetaDescription.gSynth>)
			MetaDescription.gInh -> visit_gInh(node as ASTNode.InnerNode<MetaDescription.gInh>)
			MetaDescription.gCompv -> visit_gCompv(node as ASTNode.InnerNode<MetaDescription.gCompv>)
			MetaDescription.gStart -> visit_gStart(node as ASTNode.InnerNode<MetaDescription.gStart>)
			MetaDescription.attribs -> visit_attribs(node as ASTNode.InnerNode<MetaDescription.attribs>)
			MetaDescription.attrib -> visit_attrib(node as ASTNode.InnerNode<MetaDescription.attrib>)
			MetaDescription.attribsPlus -> visit_attribsPlus(node as ASTNode.InnerNode<MetaDescription.attribsPlus>)
			MetaDescription.type -> visit_type(node as ASTNode.InnerNode<MetaDescription.type>)
			MetaDescription.setDef -> visit_setDef(node as ASTNode.InnerNode<MetaDescription.setDef>)
			MetaDescription.defValue -> visit_defValue(node as ASTNode.InnerNode<MetaDescription.defValue>)
			MetaDescription.gLine -> visit_gLine(node as ASTNode.InnerNode<MetaDescription.gLine>)
			MetaDescription.def -> visit_def(node as ASTNode.InnerNode<MetaDescription.def>)
			MetaDescription.rules -> visit_rules(node as ASTNode.InnerNode<MetaDescription.rules>)
			MetaDescription.rule -> visit_rule(node as ASTNode.InnerNode<MetaDescription.rule>)
			MetaDescription.rulesPlus -> visit_rulesPlus(node as ASTNode.InnerNode<MetaDescription.rulesPlus>)
			MetaDescription.seq -> visit_seq(node as ASTNode.InnerNode<MetaDescription.seq>)
			MetaDescription.atom -> visit_atom(node as ASTNode.InnerNode<MetaDescription.atom>)
			MetaDescription.seqPlus -> visit_seqPlus(node as ASTNode.InnerNode<MetaDescription.seqPlus>)
			MetaDescription.pass -> visit_pass(node as ASTNode.InnerNode<MetaDescription.pass>)
			MetaDescription.defBody -> visit_defBody(node as ASTNode.InnerNode<MetaDescription.defBody>)
			MetaDescription.defAtom -> visit_defAtom(node as ASTNode.InnerNode<MetaDescription.defAtom>)
			MetaDescription.defPlus -> visit_defPlus(node as ASTNode.InnerNode<MetaDescription.defPlus>)
			MetaDescription.defTerm -> visit_defTerm(node as ASTNode.InnerNode<MetaDescription.defTerm>)
			MetaDescription.defMod -> visit_defMod(node as ASTNode.InnerNode<MetaDescription.defMod>)
			MetaDescription.atName -> visit_atName(node as ASTNode.InnerNode<MetaDescription.atName>)
			MetaDescription.op -> visit_op(node as ASTNode.InnerNode<MetaDescription.op>)
            else -> throw IllegalStateException("Unknown token ${node.getToken()} met")
        }
    }
    
    abstract fun <T : Token> visitTerminal(token: T): R
    
	open fun visit_LPAREN(node: ASTNode.TerminalNode<MetaDescription.LPAREN>): R {
		return visitTerminal(node.getToken())
	}
	open fun visit_RPAREN(node: ASTNode.TerminalNode<MetaDescription.RPAREN>): R {
		return visitTerminal(node.getToken())
	}
	open fun visit_EOLN(node: ASTNode.TerminalNode<MetaDescription.EOLN>): R {
		return visitTerminal(node.getToken())
	}
	open fun visit_DEFINE(node: ASTNode.TerminalNode<MetaDescription.DEFINE>): R {
		return visitTerminal(node.getToken())
	}
	open fun visit_DESCRIBE(node: ASTNode.TerminalNode<MetaDescription.DESCRIBE>): R {
		return visitTerminal(node.getToken())
	}
	open fun visit_CHOICE(node: ASTNode.TerminalNode<MetaDescription.CHOICE>): R {
		return visitTerminal(node.getToken())
	}
	open fun visit_LTRIG(node: ASTNode.TerminalNode<MetaDescription.LTRIG>): R {
		return visitTerminal(node.getToken())
	}
	open fun visit_RTRIG(node: ASTNode.TerminalNode<MetaDescription.RTRIG>): R {
		return visitTerminal(node.getToken())
	}
	open fun visit_CHARRANGE(node: ASTNode.TerminalNode<MetaDescription.CHARRANGE>): R {
		return visitTerminal(node.getToken())
	}
	open fun visit_ASSIGN(node: ASTNode.TerminalNode<MetaDescription.ASSIGN>): R {
		return visitTerminal(node.getToken())
	}
	open fun visit_ADD(node: ASTNode.TerminalNode<MetaDescription.ADD>): R {
		return visitTerminal(node.getToken())
	}
	open fun visit_SUB(node: ASTNode.TerminalNode<MetaDescription.SUB>): R {
		return visitTerminal(node.getToken())
	}
	open fun visit_MUL(node: ASTNode.TerminalNode<MetaDescription.MUL>): R {
		return visitTerminal(node.getToken())
	}
	open fun visit_DIV(node: ASTNode.TerminalNode<MetaDescription.DIV>): R {
		return visitTerminal(node.getToken())
	}
	open fun visit_LARRAY(node: ASTNode.TerminalNode<MetaDescription.LARRAY>): R {
		return visitTerminal(node.getToken())
	}
	open fun visit_RARRAY(node: ASTNode.TerminalNode<MetaDescription.RARRAY>): R {
		return visitTerminal(node.getToken())
	}
	open fun visit_SEP(node: ASTNode.TerminalNode<MetaDescription.SEP>): R {
		return visitTerminal(node.getToken())
	}
	open fun visit_MACRO(node: ASTNode.TerminalNode<MetaDescription.MACRO>): R {
		return visitTerminal(node.getToken())
	}
	open fun visit_TOKENS(node: ASTNode.TerminalNode<MetaDescription.TOKENS>): R {
		return visitTerminal(node.getToken())
	}
	open fun visit_GRAMMAR(node: ASTNode.TerminalNode<MetaDescription.GRAMMAR>): R {
		return visitTerminal(node.getToken())
	}
	open fun visit_FRAGMENTS(node: ASTNode.TerminalNode<MetaDescription.FRAGMENTS>): R {
		return visitTerminal(node.getToken())
	}
	open fun visit_COMPANION(node: ASTNode.TerminalNode<MetaDescription.COMPANION>): R {
		return visitTerminal(node.getToken())
	}
	open fun visit_SKIP(node: ASTNode.TerminalNode<MetaDescription.SKIP>): R {
		return visitTerminal(node.getToken())
	}
	open fun visit_SYNTHESIS(node: ASTNode.TerminalNode<MetaDescription.SYNTHESIS>): R {
		return visitTerminal(node.getToken())
	}
	open fun visit_INHERITANCE(node: ASTNode.TerminalNode<MetaDescription.INHERITANCE>): R {
		return visitTerminal(node.getToken())
	}
	open fun visit_COMPUTE(node: ASTNode.TerminalNode<MetaDescription.COMPUTE>): R {
		return visitTerminal(node.getToken())
	}
	open fun visit_START(node: ASTNode.TerminalNode<MetaDescription.START>): R {
		return visitTerminal(node.getToken())
	}
	open fun visit_DEFAULT(node: ASTNode.TerminalNode<MetaDescription.DEFAULT>): R {
		return visitTerminal(node.getToken())
	}
	open fun visit_INT_TYPE(node: ASTNode.TerminalNode<MetaDescription.INT_TYPE>): R {
		return visitTerminal(node.getToken())
	}
	open fun visit_DOUBLE_TYPE(node: ASTNode.TerminalNode<MetaDescription.DOUBLE_TYPE>): R {
		return visitTerminal(node.getToken())
	}
	open fun visit_STRING_TYPE(node: ASTNode.TerminalNode<MetaDescription.STRING_TYPE>): R {
		return visitTerminal(node.getToken())
	}
	open fun visit_KOTLIN_FUNC(node: ASTNode.TerminalNode<MetaDescription.KOTLIN_FUNC>): R {
		return visitTerminal(node.getToken())
	}
	open fun visit_DOUBLE(node: ASTNode.TerminalNode<MetaDescription.DOUBLE>): R {
		return visitTerminal(node.getToken())
	}
	open fun visit_INT(node: ASTNode.TerminalNode<MetaDescription.INT>): R {
		return visitTerminal(node.getToken())
	}
	open fun visit_CHAR(node: ASTNode.TerminalNode<MetaDescription.CHAR>): R {
		return visitTerminal(node.getToken())
	}
	open fun visit_STRING(node: ASTNode.TerminalNode<MetaDescription.STRING>): R {
		return visitTerminal(node.getToken())
	}
	open fun visit_RSTRING(node: ASTNode.TerminalNode<MetaDescription.RSTRING>): R {
		return visitTerminal(node.getToken())
	}
	open fun visit_SPNAME(node: ASTNode.TerminalNode<MetaDescription.SPNAME>): R {
		return visitTerminal(node.getToken())
	}
	open fun visit_CAMELNAME(node: ASTNode.TerminalNode<MetaDescription.CAMELNAME>): R {
		return visitTerminal(node.getToken())
	}
	open fun visit_CAPSNAME(node: ASTNode.TerminalNode<MetaDescription.CAPSNAME>): R {
		return visitTerminal(node.getToken())
	}
	open fun visit_WHITESPACE(node: ASTNode.TerminalNode<MetaDescription.WHITESPACE>): R {
		return visitTerminal(node.getToken())
	}
	abstract fun visit_all(node: ASTNode.InnerNode<MetaDescription.all>): R
	abstract fun visit_m(node: ASTNode.InnerNode<MetaDescription.m>): R
	abstract fun visit_t(node: ASTNode.InnerNode<MetaDescription.t>): R
	abstract fun visit_g(node: ASTNode.InnerNode<MetaDescription.g>): R
	abstract fun visit_kfPlus(node: ASTNode.InnerNode<MetaDescription.kfPlus>): R
	abstract fun visit_tComp(node: ASTNode.InnerNode<MetaDescription.tComp>): R
	abstract fun visit_tFrag(node: ASTNode.InnerNode<MetaDescription.tFrag>): R
	abstract fun visit_tPlus(node: ASTNode.InnerNode<MetaDescription.tPlus>): R
	abstract fun visit_tSkip(node: ASTNode.InnerNode<MetaDescription.tSkip>): R
	abstract fun visit_tArray(node: ASTNode.InnerNode<MetaDescription.tArray>): R
	abstract fun visit_tArrayPlus(node: ASTNode.InnerNode<MetaDescription.tArrayPlus>): R
	abstract fun visit_tLine(node: ASTNode.InnerNode<MetaDescription.tLine>): R
	abstract fun visit_tDef(node: ASTNode.InnerNode<MetaDescription.tDef>): R
	abstract fun visit_gComp(node: ASTNode.InnerNode<MetaDescription.gComp>): R
	abstract fun visit_gPlus(node: ASTNode.InnerNode<MetaDescription.gPlus>): R
	abstract fun visit_gSynth(node: ASTNode.InnerNode<MetaDescription.gSynth>): R
	abstract fun visit_gInh(node: ASTNode.InnerNode<MetaDescription.gInh>): R
	abstract fun visit_gCompv(node: ASTNode.InnerNode<MetaDescription.gCompv>): R
	abstract fun visit_gStart(node: ASTNode.InnerNode<MetaDescription.gStart>): R
	abstract fun visit_attribs(node: ASTNode.InnerNode<MetaDescription.attribs>): R
	abstract fun visit_attrib(node: ASTNode.InnerNode<MetaDescription.attrib>): R
	abstract fun visit_attribsPlus(node: ASTNode.InnerNode<MetaDescription.attribsPlus>): R
	abstract fun visit_type(node: ASTNode.InnerNode<MetaDescription.type>): R
	abstract fun visit_setDef(node: ASTNode.InnerNode<MetaDescription.setDef>): R
	abstract fun visit_defValue(node: ASTNode.InnerNode<MetaDescription.defValue>): R
	abstract fun visit_gLine(node: ASTNode.InnerNode<MetaDescription.gLine>): R
	abstract fun visit_def(node: ASTNode.InnerNode<MetaDescription.def>): R
	abstract fun visit_rules(node: ASTNode.InnerNode<MetaDescription.rules>): R
	abstract fun visit_rule(node: ASTNode.InnerNode<MetaDescription.rule>): R
	abstract fun visit_rulesPlus(node: ASTNode.InnerNode<MetaDescription.rulesPlus>): R
	abstract fun visit_seq(node: ASTNode.InnerNode<MetaDescription.seq>): R
	abstract fun visit_atom(node: ASTNode.InnerNode<MetaDescription.atom>): R
	abstract fun visit_seqPlus(node: ASTNode.InnerNode<MetaDescription.seqPlus>): R
	abstract fun visit_pass(node: ASTNode.InnerNode<MetaDescription.pass>): R
	abstract fun visit_defBody(node: ASTNode.InnerNode<MetaDescription.defBody>): R
	abstract fun visit_defAtom(node: ASTNode.InnerNode<MetaDescription.defAtom>): R
	abstract fun visit_defPlus(node: ASTNode.InnerNode<MetaDescription.defPlus>): R
	abstract fun visit_defTerm(node: ASTNode.InnerNode<MetaDescription.defTerm>): R
	abstract fun visit_defMod(node: ASTNode.InnerNode<MetaDescription.defMod>): R
	abstract fun visit_atName(node: ASTNode.InnerNode<MetaDescription.atName>): R
	abstract fun visit_op(node: ASTNode.InnerNode<MetaDescription.op>): R

}
