/**
This code is generated by [translate.codegen.VisitorBaseBuilder] derived from [translate.codegen.helpers.BuilderHelper]
based on grammar description [translate.meta.helpers.MetaGrammarInfo] derived from [translate.meta.helpers.MetaGrammarInfo]
*/

package translate.meta

import structure.Visitor
import structure.ASTNode
import grammar.token.Token
import translate.meta.helpers.MetaGrammarInfo

@Suppress("UNCHECKED_CAST")
interface MetaVisitorBase<R, A> : Visitor<R, A> {

/*
Start: all
all -> m t g
m -> MACRO LPAREN kfPlus RPAREN | <eps>
kfPlus -> KOTLIN_FUNC kfPlus | <eps>
t -> TOKENS LPAREN tComp tFrag tPlus RPAREN
tComp -> COMPANION LPAREN tSkip RPAREN | <eps>
tSkip -> SKIP DESCRIBE tArray EOLN
tArray -> LARRAY CAPSNAME tArrayPlus RARRAY
tArrayPlus -> SEP CAPSNAME tArrayPlus | <eps>
tFrag -> FRAGMENTS LPAREN tFragPlus RPAREN | <eps>
tFragPlus -> tFragLine tFragPlus | <eps>
tFragLine -> CAPSNAME DESCRIBE STRING EOLN
tPlus -> tLine tPlus | <eps>
tLine -> CAPSNAME DESCRIBE tDef EOLN
tDef -> STRING | RSTRING | LTRIG CHAR CHARRANGE CHAR RTRIG
g -> GRAMMAR LPAREN gComp gPlus RPAREN
gComp -> COMPANION LPAREN gSynth gInh gCompv gStart RPAREN
gSynth -> SYNTHESIS LPAREN attribs RPAREN | <eps>
gInh -> INHERITANCE LPAREN attribs RPAREN | <eps>
gCompv -> COMPUTE LPAREN attribs RPAREN | <eps>
gStart -> START DESCRIBE CAMELNAME EOLN
attribs -> attrib attribsPlus
attrib -> CAMELNAME DESCRIBE type setDef EOLN
type -> INT_TYPE | DOUBLE_TYPE | STRING_TYPE
setDef -> DEFINE LPAREN DEFAULT ASSIGN defValue RPAREN | <eps>
attribsPlus -> attrib attribsPlus | <eps>
gPlus -> gLine gPlus | <eps>
gLine -> CAMELNAME def DESCRIBE rules EOLN
rules -> rule rulesPlus
rule -> seq def
seq -> atom seqPlus
atom -> CAPSNAME | CAMELNAME pass
pass -> LPAREN defBody RPAREN | <eps>
seqPlus -> atom seqPlus | <eps>
rulesPlus -> CHOICE rule rulesPlus | <eps>
def -> DEFINE LPAREN defBody RPAREN | <eps>
defBody -> defAtom defPlus
defAtom -> CAMELNAME ASSIGN defValue
defValue -> STRING | defTerm defMod | SUB defTerm
defTerm -> atName | INT | DOUBLE
defMod -> op defTerm | <eps>
op -> ADD | SUB | MUL | DIV
atName -> SPNAME | CAMELNAME | MACROREF CAMELNAME LBRACKET macroBody RBRACKET
macroBody -> defValue macroPlus
macroPlus -> SEP defValue macroPlus | <eps>
defPlus -> SEP defAtom defPlus | <eps>
*/

    fun <T : Token> visitTerminal(token: T): R

    override fun visit(node: ASTNode<out Token>, value: A): R {
        return when(node.getToken()) {
            MetaGrammarInfo.LPAREN -> visit_LPAREN(node as ASTNode.TerminalNode<MetaGrammarInfo.LPAREN>, value)
            MetaGrammarInfo.RPAREN -> visit_RPAREN(node as ASTNode.TerminalNode<MetaGrammarInfo.RPAREN>, value)
            MetaGrammarInfo.EOLN -> visit_EOLN(node as ASTNode.TerminalNode<MetaGrammarInfo.EOLN>, value)
            MetaGrammarInfo.DEFINE -> visit_DEFINE(node as ASTNode.TerminalNode<MetaGrammarInfo.DEFINE>, value)
            MetaGrammarInfo.DESCRIBE -> visit_DESCRIBE(node as ASTNode.TerminalNode<MetaGrammarInfo.DESCRIBE>, value)
            MetaGrammarInfo.CHOICE -> visit_CHOICE(node as ASTNode.TerminalNode<MetaGrammarInfo.CHOICE>, value)
            MetaGrammarInfo.LTRIG -> visit_LTRIG(node as ASTNode.TerminalNode<MetaGrammarInfo.LTRIG>, value)
            MetaGrammarInfo.RTRIG -> visit_RTRIG(node as ASTNode.TerminalNode<MetaGrammarInfo.RTRIG>, value)
            MetaGrammarInfo.CHARRANGE -> visit_CHARRANGE(node as ASTNode.TerminalNode<MetaGrammarInfo.CHARRANGE>, value)
            MetaGrammarInfo.ASSIGN -> visit_ASSIGN(node as ASTNode.TerminalNode<MetaGrammarInfo.ASSIGN>, value)
            MetaGrammarInfo.ADD -> visit_ADD(node as ASTNode.TerminalNode<MetaGrammarInfo.ADD>, value)
            MetaGrammarInfo.SUB -> visit_SUB(node as ASTNode.TerminalNode<MetaGrammarInfo.SUB>, value)
            MetaGrammarInfo.MUL -> visit_MUL(node as ASTNode.TerminalNode<MetaGrammarInfo.MUL>, value)
            MetaGrammarInfo.DIV -> visit_DIV(node as ASTNode.TerminalNode<MetaGrammarInfo.DIV>, value)
            MetaGrammarInfo.LARRAY -> visit_LARRAY(node as ASTNode.TerminalNode<MetaGrammarInfo.LARRAY>, value)
            MetaGrammarInfo.RARRAY -> visit_RARRAY(node as ASTNode.TerminalNode<MetaGrammarInfo.RARRAY>, value)
            MetaGrammarInfo.SEP -> visit_SEP(node as ASTNode.TerminalNode<MetaGrammarInfo.SEP>, value)
            MetaGrammarInfo.LBRACKET -> visit_LBRACKET(node as ASTNode.TerminalNode<MetaGrammarInfo.LBRACKET>, value)
            MetaGrammarInfo.RBRACKET -> visit_RBRACKET(node as ASTNode.TerminalNode<MetaGrammarInfo.RBRACKET>, value)
            MetaGrammarInfo.MACRO -> visit_MACRO(node as ASTNode.TerminalNode<MetaGrammarInfo.MACRO>, value)
            MetaGrammarInfo.TOKENS -> visit_TOKENS(node as ASTNode.TerminalNode<MetaGrammarInfo.TOKENS>, value)
            MetaGrammarInfo.GRAMMAR -> visit_GRAMMAR(node as ASTNode.TerminalNode<MetaGrammarInfo.GRAMMAR>, value)
            MetaGrammarInfo.FRAGMENTS -> visit_FRAGMENTS(node as ASTNode.TerminalNode<MetaGrammarInfo.FRAGMENTS>, value)
            MetaGrammarInfo.COMPANION -> visit_COMPANION(node as ASTNode.TerminalNode<MetaGrammarInfo.COMPANION>, value)
            MetaGrammarInfo.SKIP -> visit_SKIP(node as ASTNode.TerminalNode<MetaGrammarInfo.SKIP>, value)
            MetaGrammarInfo.SYNTHESIS -> visit_SYNTHESIS(node as ASTNode.TerminalNode<MetaGrammarInfo.SYNTHESIS>, value)
            MetaGrammarInfo.INHERITANCE -> visit_INHERITANCE(node as ASTNode.TerminalNode<MetaGrammarInfo.INHERITANCE>, value)
            MetaGrammarInfo.COMPUTE -> visit_COMPUTE(node as ASTNode.TerminalNode<MetaGrammarInfo.COMPUTE>, value)
            MetaGrammarInfo.START -> visit_START(node as ASTNode.TerminalNode<MetaGrammarInfo.START>, value)
            MetaGrammarInfo.DEFAULT -> visit_DEFAULT(node as ASTNode.TerminalNode<MetaGrammarInfo.DEFAULT>, value)
            MetaGrammarInfo.INT_TYPE -> visit_INT_TYPE(node as ASTNode.TerminalNode<MetaGrammarInfo.INT_TYPE>, value)
            MetaGrammarInfo.DOUBLE_TYPE -> visit_DOUBLE_TYPE(node as ASTNode.TerminalNode<MetaGrammarInfo.DOUBLE_TYPE>, value)
            MetaGrammarInfo.STRING_TYPE -> visit_STRING_TYPE(node as ASTNode.TerminalNode<MetaGrammarInfo.STRING_TYPE>, value)
            MetaGrammarInfo.KOTLIN_FUNC -> visit_KOTLIN_FUNC(node as ASTNode.TerminalNode<Token.VariantToken.VariantInstanceToken<MetaGrammarInfo.KOTLIN_FUNC>>, value)
            MetaGrammarInfo.DOUBLE -> visit_DOUBLE(node as ASTNode.TerminalNode<Token.VariantToken.VariantInstanceToken<MetaGrammarInfo.DOUBLE>>, value)
            MetaGrammarInfo.INT -> visit_INT(node as ASTNode.TerminalNode<Token.VariantToken.VariantInstanceToken<MetaGrammarInfo.INT>>, value)
            MetaGrammarInfo.CHAR -> visit_CHAR(node as ASTNode.TerminalNode<Token.VariantToken.VariantInstanceToken<MetaGrammarInfo.CHAR>>, value)
            MetaGrammarInfo.STRING -> visit_STRING(node as ASTNode.TerminalNode<Token.VariantToken.VariantInstanceToken<MetaGrammarInfo.STRING>>, value)
            MetaGrammarInfo.RSTRING -> visit_RSTRING(node as ASTNode.TerminalNode<Token.VariantToken.VariantInstanceToken<MetaGrammarInfo.RSTRING>>, value)
            MetaGrammarInfo.MACROREF -> visit_MACROREF(node as ASTNode.TerminalNode<Token.VariantToken.VariantInstanceToken<MetaGrammarInfo.MACROREF>>, value)
            MetaGrammarInfo.SPNAME -> visit_SPNAME(node as ASTNode.TerminalNode<Token.VariantToken.VariantInstanceToken<MetaGrammarInfo.SPNAME>>, value)
            MetaGrammarInfo.CAMELNAME -> visit_CAMELNAME(node as ASTNode.TerminalNode<Token.VariantToken.VariantInstanceToken<MetaGrammarInfo.CAMELNAME>>, value)
            MetaGrammarInfo.CAPSNAME -> visit_CAPSNAME(node as ASTNode.TerminalNode<Token.VariantToken.VariantInstanceToken<MetaGrammarInfo.CAPSNAME>>, value)
            MetaGrammarInfo.WHITESPACE -> visit_WHITESPACE(node as ASTNode.TerminalNode<Token.VariantToken.VariantInstanceToken<MetaGrammarInfo.WHITESPACE>>, value)
            MetaGrammarInfo.all -> visit_all(node as ASTNode.InnerNode<MetaGrammarInfo.all>, value)
            MetaGrammarInfo.m -> visit_m(node as ASTNode.InnerNode<MetaGrammarInfo.m>, value)
            MetaGrammarInfo.kfPlus -> visit_kfPlus(node as ASTNode.InnerNode<MetaGrammarInfo.kfPlus>, value)
            MetaGrammarInfo.t -> visit_t(node as ASTNode.InnerNode<MetaGrammarInfo.t>, value)
            MetaGrammarInfo.tComp -> visit_tComp(node as ASTNode.InnerNode<MetaGrammarInfo.tComp>, value)
            MetaGrammarInfo.tSkip -> visit_tSkip(node as ASTNode.InnerNode<MetaGrammarInfo.tSkip>, value)
            MetaGrammarInfo.tArray -> visit_tArray(node as ASTNode.InnerNode<MetaGrammarInfo.tArray>, value)
            MetaGrammarInfo.tArrayPlus -> visit_tArrayPlus(node as ASTNode.InnerNode<MetaGrammarInfo.tArrayPlus>, value)
            MetaGrammarInfo.tFrag -> visit_tFrag(node as ASTNode.InnerNode<MetaGrammarInfo.tFrag>, value)
            MetaGrammarInfo.tFragLine -> visit_tFragLine(node as ASTNode.InnerNode<MetaGrammarInfo.tFragLine>, value)
            MetaGrammarInfo.tFragPlus -> visit_tFragPlus(node as ASTNode.InnerNode<MetaGrammarInfo.tFragPlus>, value)
            MetaGrammarInfo.tLine -> visit_tLine(node as ASTNode.InnerNode<MetaGrammarInfo.tLine>, value)
            MetaGrammarInfo.tDef -> visit_tDef(node as ASTNode.InnerNode<MetaGrammarInfo.tDef>, value)
            MetaGrammarInfo.tPlus -> visit_tPlus(node as ASTNode.InnerNode<MetaGrammarInfo.tPlus>, value)
            MetaGrammarInfo.g -> visit_g(node as ASTNode.InnerNode<MetaGrammarInfo.g>, value)
            MetaGrammarInfo.gComp -> visit_gComp(node as ASTNode.InnerNode<MetaGrammarInfo.gComp>, value)
            MetaGrammarInfo.gSynth -> visit_gSynth(node as ASTNode.InnerNode<MetaGrammarInfo.gSynth>, value)
            MetaGrammarInfo.gInh -> visit_gInh(node as ASTNode.InnerNode<MetaGrammarInfo.gInh>, value)
            MetaGrammarInfo.gCompv -> visit_gCompv(node as ASTNode.InnerNode<MetaGrammarInfo.gCompv>, value)
            MetaGrammarInfo.gStart -> visit_gStart(node as ASTNode.InnerNode<MetaGrammarInfo.gStart>, value)
            MetaGrammarInfo.gLine -> visit_gLine(node as ASTNode.InnerNode<MetaGrammarInfo.gLine>, value)
            MetaGrammarInfo.gPlus -> visit_gPlus(node as ASTNode.InnerNode<MetaGrammarInfo.gPlus>, value)
            MetaGrammarInfo.attribs -> visit_attribs(node as ASTNode.InnerNode<MetaGrammarInfo.attribs>, value)
            MetaGrammarInfo.attrib -> visit_attrib(node as ASTNode.InnerNode<MetaGrammarInfo.attrib>, value)
            MetaGrammarInfo.attribsPlus -> visit_attribsPlus(node as ASTNode.InnerNode<MetaGrammarInfo.attribsPlus>, value)
            MetaGrammarInfo.type -> visit_type(node as ASTNode.InnerNode<MetaGrammarInfo.type>, value)
            MetaGrammarInfo.rules -> visit_rules(node as ASTNode.InnerNode<MetaGrammarInfo.rules>, value)
            MetaGrammarInfo.rule -> visit_rule(node as ASTNode.InnerNode<MetaGrammarInfo.rule>, value)
            MetaGrammarInfo.rulesPlus -> visit_rulesPlus(node as ASTNode.InnerNode<MetaGrammarInfo.rulesPlus>, value)
            MetaGrammarInfo.def -> visit_def(node as ASTNode.InnerNode<MetaGrammarInfo.def>, value)
            MetaGrammarInfo.pass -> visit_pass(node as ASTNode.InnerNode<MetaGrammarInfo.pass>, value)
            MetaGrammarInfo.defBody -> visit_defBody(node as ASTNode.InnerNode<MetaGrammarInfo.defBody>, value)
            MetaGrammarInfo.defAtom -> visit_defAtom(node as ASTNode.InnerNode<MetaGrammarInfo.defAtom>, value)
            MetaGrammarInfo.defValue -> visit_defValue(node as ASTNode.InnerNode<MetaGrammarInfo.defValue>, value)
            MetaGrammarInfo.defTerm -> visit_defTerm(node as ASTNode.InnerNode<MetaGrammarInfo.defTerm>, value)
            MetaGrammarInfo.defMod -> visit_defMod(node as ASTNode.InnerNode<MetaGrammarInfo.defMod>, value)
            MetaGrammarInfo.setDef -> visit_setDef(node as ASTNode.InnerNode<MetaGrammarInfo.setDef>, value)
            MetaGrammarInfo.op -> visit_op(node as ASTNode.InnerNode<MetaGrammarInfo.op>, value)
            MetaGrammarInfo.defPlus -> visit_defPlus(node as ASTNode.InnerNode<MetaGrammarInfo.defPlus>, value)
            MetaGrammarInfo.macroBody -> visit_macroBody(node as ASTNode.InnerNode<MetaGrammarInfo.macroBody>, value)
            MetaGrammarInfo.macroPlus -> visit_macroPlus(node as ASTNode.InnerNode<MetaGrammarInfo.macroPlus>, value)
            MetaGrammarInfo.seq -> visit_seq(node as ASTNode.InnerNode<MetaGrammarInfo.seq>, value)
            MetaGrammarInfo.atom -> visit_atom(node as ASTNode.InnerNode<MetaGrammarInfo.atom>, value)
            MetaGrammarInfo.seqPlus -> visit_seqPlus(node as ASTNode.InnerNode<MetaGrammarInfo.seqPlus>, value)
            MetaGrammarInfo.atName -> visit_atName(node as ASTNode.InnerNode<MetaGrammarInfo.atName>, value)
            else -> throw IllegalStateException("Unknown token ${node.getToken()} met")
        }
    }    

    fun visit_LPAREN(node: ASTNode.TerminalNode<MetaGrammarInfo.LPAREN>, value: A): R {
        return visitTerminal(node.getToken())
    }

    fun visit_RPAREN(node: ASTNode.TerminalNode<MetaGrammarInfo.RPAREN>, value: A): R {
        return visitTerminal(node.getToken())
    }

    fun visit_EOLN(node: ASTNode.TerminalNode<MetaGrammarInfo.EOLN>, value: A): R {
        return visitTerminal(node.getToken())
    }

    fun visit_DEFINE(node: ASTNode.TerminalNode<MetaGrammarInfo.DEFINE>, value: A): R {
        return visitTerminal(node.getToken())
    }

    fun visit_DESCRIBE(node: ASTNode.TerminalNode<MetaGrammarInfo.DESCRIBE>, value: A): R {
        return visitTerminal(node.getToken())
    }

    fun visit_CHOICE(node: ASTNode.TerminalNode<MetaGrammarInfo.CHOICE>, value: A): R {
        return visitTerminal(node.getToken())
    }

    fun visit_LTRIG(node: ASTNode.TerminalNode<MetaGrammarInfo.LTRIG>, value: A): R {
        return visitTerminal(node.getToken())
    }

    fun visit_RTRIG(node: ASTNode.TerminalNode<MetaGrammarInfo.RTRIG>, value: A): R {
        return visitTerminal(node.getToken())
    }

    fun visit_CHARRANGE(node: ASTNode.TerminalNode<MetaGrammarInfo.CHARRANGE>, value: A): R {
        return visitTerminal(node.getToken())
    }

    fun visit_ASSIGN(node: ASTNode.TerminalNode<MetaGrammarInfo.ASSIGN>, value: A): R {
        return visitTerminal(node.getToken())
    }

    fun visit_ADD(node: ASTNode.TerminalNode<MetaGrammarInfo.ADD>, value: A): R {
        return visitTerminal(node.getToken())
    }

    fun visit_SUB(node: ASTNode.TerminalNode<MetaGrammarInfo.SUB>, value: A): R {
        return visitTerminal(node.getToken())
    }

    fun visit_MUL(node: ASTNode.TerminalNode<MetaGrammarInfo.MUL>, value: A): R {
        return visitTerminal(node.getToken())
    }

    fun visit_DIV(node: ASTNode.TerminalNode<MetaGrammarInfo.DIV>, value: A): R {
        return visitTerminal(node.getToken())
    }

    fun visit_LARRAY(node: ASTNode.TerminalNode<MetaGrammarInfo.LARRAY>, value: A): R {
        return visitTerminal(node.getToken())
    }

    fun visit_RARRAY(node: ASTNode.TerminalNode<MetaGrammarInfo.RARRAY>, value: A): R {
        return visitTerminal(node.getToken())
    }

    fun visit_SEP(node: ASTNode.TerminalNode<MetaGrammarInfo.SEP>, value: A): R {
        return visitTerminal(node.getToken())
    }

    fun visit_LBRACKET(node: ASTNode.TerminalNode<MetaGrammarInfo.LBRACKET>, value: A): R {
        return visitTerminal(node.getToken())
    }

    fun visit_RBRACKET(node: ASTNode.TerminalNode<MetaGrammarInfo.RBRACKET>, value: A): R {
        return visitTerminal(node.getToken())
    }

    fun visit_MACRO(node: ASTNode.TerminalNode<MetaGrammarInfo.MACRO>, value: A): R {
        return visitTerminal(node.getToken())
    }

    fun visit_TOKENS(node: ASTNode.TerminalNode<MetaGrammarInfo.TOKENS>, value: A): R {
        return visitTerminal(node.getToken())
    }

    fun visit_GRAMMAR(node: ASTNode.TerminalNode<MetaGrammarInfo.GRAMMAR>, value: A): R {
        return visitTerminal(node.getToken())
    }

    fun visit_FRAGMENTS(node: ASTNode.TerminalNode<MetaGrammarInfo.FRAGMENTS>, value: A): R {
        return visitTerminal(node.getToken())
    }

    fun visit_COMPANION(node: ASTNode.TerminalNode<MetaGrammarInfo.COMPANION>, value: A): R {
        return visitTerminal(node.getToken())
    }

    fun visit_SKIP(node: ASTNode.TerminalNode<MetaGrammarInfo.SKIP>, value: A): R {
        return visitTerminal(node.getToken())
    }

    fun visit_SYNTHESIS(node: ASTNode.TerminalNode<MetaGrammarInfo.SYNTHESIS>, value: A): R {
        return visitTerminal(node.getToken())
    }

    fun visit_INHERITANCE(node: ASTNode.TerminalNode<MetaGrammarInfo.INHERITANCE>, value: A): R {
        return visitTerminal(node.getToken())
    }

    fun visit_COMPUTE(node: ASTNode.TerminalNode<MetaGrammarInfo.COMPUTE>, value: A): R {
        return visitTerminal(node.getToken())
    }

    fun visit_START(node: ASTNode.TerminalNode<MetaGrammarInfo.START>, value: A): R {
        return visitTerminal(node.getToken())
    }

    fun visit_DEFAULT(node: ASTNode.TerminalNode<MetaGrammarInfo.DEFAULT>, value: A): R {
        return visitTerminal(node.getToken())
    }

    fun visit_INT_TYPE(node: ASTNode.TerminalNode<MetaGrammarInfo.INT_TYPE>, value: A): R {
        return visitTerminal(node.getToken())
    }

    fun visit_DOUBLE_TYPE(node: ASTNode.TerminalNode<MetaGrammarInfo.DOUBLE_TYPE>, value: A): R {
        return visitTerminal(node.getToken())
    }

    fun visit_STRING_TYPE(node: ASTNode.TerminalNode<MetaGrammarInfo.STRING_TYPE>, value: A): R {
        return visitTerminal(node.getToken())
    }

    fun visit_KOTLIN_FUNC(node: ASTNode.TerminalNode<Token.VariantToken.VariantInstanceToken<MetaGrammarInfo.KOTLIN_FUNC>>, value: A): R {
        return visitTerminal(node.getToken())
    }

    fun visit_DOUBLE(node: ASTNode.TerminalNode<Token.VariantToken.VariantInstanceToken<MetaGrammarInfo.DOUBLE>>, value: A): R {
        return visitTerminal(node.getToken())
    }

    fun visit_INT(node: ASTNode.TerminalNode<Token.VariantToken.VariantInstanceToken<MetaGrammarInfo.INT>>, value: A): R {
        return visitTerminal(node.getToken())
    }

    fun visit_CHAR(node: ASTNode.TerminalNode<Token.VariantToken.VariantInstanceToken<MetaGrammarInfo.CHAR>>, value: A): R {
        return visitTerminal(node.getToken())
    }

    fun visit_STRING(node: ASTNode.TerminalNode<Token.VariantToken.VariantInstanceToken<MetaGrammarInfo.STRING>>, value: A): R {
        return visitTerminal(node.getToken())
    }

    fun visit_RSTRING(node: ASTNode.TerminalNode<Token.VariantToken.VariantInstanceToken<MetaGrammarInfo.RSTRING>>, value: A): R {
        return visitTerminal(node.getToken())
    }

    fun visit_MACROREF(node: ASTNode.TerminalNode<Token.VariantToken.VariantInstanceToken<MetaGrammarInfo.MACROREF>>, value: A): R {
        return visitTerminal(node.getToken())
    }

    fun visit_SPNAME(node: ASTNode.TerminalNode<Token.VariantToken.VariantInstanceToken<MetaGrammarInfo.SPNAME>>, value: A): R {
        return visitTerminal(node.getToken())
    }

    fun visit_CAMELNAME(node: ASTNode.TerminalNode<Token.VariantToken.VariantInstanceToken<MetaGrammarInfo.CAMELNAME>>, value: A): R {
        return visitTerminal(node.getToken())
    }

    fun visit_CAPSNAME(node: ASTNode.TerminalNode<Token.VariantToken.VariantInstanceToken<MetaGrammarInfo.CAPSNAME>>, value: A): R {
        return visitTerminal(node.getToken())
    }

    fun visit_WHITESPACE(node: ASTNode.TerminalNode<Token.VariantToken.VariantInstanceToken<MetaGrammarInfo.WHITESPACE>>, value: A): R {
        return visitTerminal(node.getToken())
    }

    /**
    all -> m t g
    */
    fun visit_all(node: ASTNode.InnerNode<MetaGrammarInfo.all>, value: A): R {
        throw IllegalStateException("Unexpected expansion ${node.getToken()} -> ${node.getExpansion()} visited while visiting traversing tree")
    }

    fun visit_m(node: ASTNode.InnerNode<MetaGrammarInfo.m>, value: A): R {
        return when (val id = node.getExpansion().getId()) {
            0 -> visit_m_0(node, value)
            1 -> visit_m_1(node, value)
            else -> throw IllegalStateException("Unexpected expansion id $id in expansion of m")
        }
    }

    /**
    m -> MACRO LPAREN kfPlus RPAREN
    */
    fun visit_m_0(node: ASTNode.InnerNode<MetaGrammarInfo.m>, value: A): R {
        throw IllegalStateException("Unexpected expansion ${node.getToken()} -> ${node.getExpansion()} visited while visiting traversing tree") 
    }


    /**
    m -> <eps>
    */
    fun visit_m_1(node: ASTNode.InnerNode<MetaGrammarInfo.m>, value: A): R {
        throw IllegalStateException("Unexpected expansion ${node.getToken()} -> ${node.getExpansion()} visited while visiting traversing tree") 
    }


    fun visit_kfPlus(node: ASTNode.InnerNode<MetaGrammarInfo.kfPlus>, value: A): R {
        return when (val id = node.getExpansion().getId()) {
            0 -> visit_kfPlus_0(node, value)
            1 -> visit_kfPlus_1(node, value)
            else -> throw IllegalStateException("Unexpected expansion id $id in expansion of kfPlus")
        }
    }

    /**
    kfPlus -> KOTLIN_FUNC kfPlus
    */
    fun visit_kfPlus_0(node: ASTNode.InnerNode<MetaGrammarInfo.kfPlus>, value: A): R {
        throw IllegalStateException("Unexpected expansion ${node.getToken()} -> ${node.getExpansion()} visited while visiting traversing tree") 
    }


    /**
    kfPlus -> <eps>
    */
    fun visit_kfPlus_1(node: ASTNode.InnerNode<MetaGrammarInfo.kfPlus>, value: A): R {
        throw IllegalStateException("Unexpected expansion ${node.getToken()} -> ${node.getExpansion()} visited while visiting traversing tree") 
    }


    /**
    t -> TOKENS LPAREN tComp tFrag tPlus RPAREN
    */
    fun visit_t(node: ASTNode.InnerNode<MetaGrammarInfo.t>, value: A): R {
        throw IllegalStateException("Unexpected expansion ${node.getToken()} -> ${node.getExpansion()} visited while visiting traversing tree")
    }

    fun visit_tComp(node: ASTNode.InnerNode<MetaGrammarInfo.tComp>, value: A): R {
        return when (val id = node.getExpansion().getId()) {
            0 -> visit_tComp_0(node, value)
            1 -> visit_tComp_1(node, value)
            else -> throw IllegalStateException("Unexpected expansion id $id in expansion of tComp")
        }
    }

    /**
    tComp -> COMPANION LPAREN tSkip RPAREN
    */
    fun visit_tComp_0(node: ASTNode.InnerNode<MetaGrammarInfo.tComp>, value: A): R {
        throw IllegalStateException("Unexpected expansion ${node.getToken()} -> ${node.getExpansion()} visited while visiting traversing tree") 
    }


    /**
    tComp -> <eps>
    */
    fun visit_tComp_1(node: ASTNode.InnerNode<MetaGrammarInfo.tComp>, value: A): R {
        throw IllegalStateException("Unexpected expansion ${node.getToken()} -> ${node.getExpansion()} visited while visiting traversing tree") 
    }


    /**
    tSkip -> SKIP DESCRIBE tArray EOLN
    */
    fun visit_tSkip(node: ASTNode.InnerNode<MetaGrammarInfo.tSkip>, value: A): R {
        throw IllegalStateException("Unexpected expansion ${node.getToken()} -> ${node.getExpansion()} visited while visiting traversing tree")
    }

    /**
    tArray -> LARRAY CAPSNAME tArrayPlus RARRAY
    */
    fun visit_tArray(node: ASTNode.InnerNode<MetaGrammarInfo.tArray>, value: A): R {
        throw IllegalStateException("Unexpected expansion ${node.getToken()} -> ${node.getExpansion()} visited while visiting traversing tree")
    }

    fun visit_tArrayPlus(node: ASTNode.InnerNode<MetaGrammarInfo.tArrayPlus>, value: A): R {
        return when (val id = node.getExpansion().getId()) {
            0 -> visit_tArrayPlus_0(node, value)
            1 -> visit_tArrayPlus_1(node, value)
            else -> throw IllegalStateException("Unexpected expansion id $id in expansion of tArrayPlus")
        }
    }

    /**
    tArrayPlus -> SEP CAPSNAME tArrayPlus
    */
    fun visit_tArrayPlus_0(node: ASTNode.InnerNode<MetaGrammarInfo.tArrayPlus>, value: A): R {
        throw IllegalStateException("Unexpected expansion ${node.getToken()} -> ${node.getExpansion()} visited while visiting traversing tree") 
    }


    /**
    tArrayPlus -> <eps>
    */
    fun visit_tArrayPlus_1(node: ASTNode.InnerNode<MetaGrammarInfo.tArrayPlus>, value: A): R {
        throw IllegalStateException("Unexpected expansion ${node.getToken()} -> ${node.getExpansion()} visited while visiting traversing tree") 
    }


    fun visit_tFrag(node: ASTNode.InnerNode<MetaGrammarInfo.tFrag>, value: A): R {
        return when (val id = node.getExpansion().getId()) {
            0 -> visit_tFrag_0(node, value)
            1 -> visit_tFrag_1(node, value)
            else -> throw IllegalStateException("Unexpected expansion id $id in expansion of tFrag")
        }
    }

    /**
    tFrag -> FRAGMENTS LPAREN tFragPlus RPAREN
    */
    fun visit_tFrag_0(node: ASTNode.InnerNode<MetaGrammarInfo.tFrag>, value: A): R {
        throw IllegalStateException("Unexpected expansion ${node.getToken()} -> ${node.getExpansion()} visited while visiting traversing tree") 
    }


    /**
    tFrag -> <eps>
    */
    fun visit_tFrag_1(node: ASTNode.InnerNode<MetaGrammarInfo.tFrag>, value: A): R {
        throw IllegalStateException("Unexpected expansion ${node.getToken()} -> ${node.getExpansion()} visited while visiting traversing tree") 
    }


    /**
    tFragLine -> CAPSNAME DESCRIBE STRING EOLN
    */
    fun visit_tFragLine(node: ASTNode.InnerNode<MetaGrammarInfo.tFragLine>, value: A): R {
        throw IllegalStateException("Unexpected expansion ${node.getToken()} -> ${node.getExpansion()} visited while visiting traversing tree")
    }

    fun visit_tFragPlus(node: ASTNode.InnerNode<MetaGrammarInfo.tFragPlus>, value: A): R {
        return when (val id = node.getExpansion().getId()) {
            0 -> visit_tFragPlus_0(node, value)
            1 -> visit_tFragPlus_1(node, value)
            else -> throw IllegalStateException("Unexpected expansion id $id in expansion of tFragPlus")
        }
    }

    /**
    tFragPlus -> tFragLine tFragPlus
    */
    fun visit_tFragPlus_0(node: ASTNode.InnerNode<MetaGrammarInfo.tFragPlus>, value: A): R {
        throw IllegalStateException("Unexpected expansion ${node.getToken()} -> ${node.getExpansion()} visited while visiting traversing tree") 
    }


    /**
    tFragPlus -> <eps>
    */
    fun visit_tFragPlus_1(node: ASTNode.InnerNode<MetaGrammarInfo.tFragPlus>, value: A): R {
        throw IllegalStateException("Unexpected expansion ${node.getToken()} -> ${node.getExpansion()} visited while visiting traversing tree") 
    }


    /**
    tLine -> CAPSNAME DESCRIBE tDef EOLN
    */
    fun visit_tLine(node: ASTNode.InnerNode<MetaGrammarInfo.tLine>, value: A): R {
        throw IllegalStateException("Unexpected expansion ${node.getToken()} -> ${node.getExpansion()} visited while visiting traversing tree")
    }

    fun visit_tDef(node: ASTNode.InnerNode<MetaGrammarInfo.tDef>, value: A): R {
        return when (val id = node.getExpansion().getId()) {
            0 -> visit_tDef_0(node, value)
            1 -> visit_tDef_1(node, value)
            2 -> visit_tDef_2(node, value)
            else -> throw IllegalStateException("Unexpected expansion id $id in expansion of tDef")
        }
    }

    /**
    tDef -> STRING
    */
    fun visit_tDef_0(node: ASTNode.InnerNode<MetaGrammarInfo.tDef>, value: A): R {
        throw IllegalStateException("Unexpected expansion ${node.getToken()} -> ${node.getExpansion()} visited while visiting traversing tree") 
    }


    /**
    tDef -> RSTRING
    */
    fun visit_tDef_1(node: ASTNode.InnerNode<MetaGrammarInfo.tDef>, value: A): R {
        throw IllegalStateException("Unexpected expansion ${node.getToken()} -> ${node.getExpansion()} visited while visiting traversing tree") 
    }


    /**
    tDef -> LTRIG CHAR CHARRANGE CHAR RTRIG
    */
    fun visit_tDef_2(node: ASTNode.InnerNode<MetaGrammarInfo.tDef>, value: A): R {
        throw IllegalStateException("Unexpected expansion ${node.getToken()} -> ${node.getExpansion()} visited while visiting traversing tree") 
    }


    fun visit_tPlus(node: ASTNode.InnerNode<MetaGrammarInfo.tPlus>, value: A): R {
        return when (val id = node.getExpansion().getId()) {
            0 -> visit_tPlus_0(node, value)
            1 -> visit_tPlus_1(node, value)
            else -> throw IllegalStateException("Unexpected expansion id $id in expansion of tPlus")
        }
    }

    /**
    tPlus -> tLine tPlus
    */
    fun visit_tPlus_0(node: ASTNode.InnerNode<MetaGrammarInfo.tPlus>, value: A): R {
        throw IllegalStateException("Unexpected expansion ${node.getToken()} -> ${node.getExpansion()} visited while visiting traversing tree") 
    }


    /**
    tPlus -> <eps>
    */
    fun visit_tPlus_1(node: ASTNode.InnerNode<MetaGrammarInfo.tPlus>, value: A): R {
        throw IllegalStateException("Unexpected expansion ${node.getToken()} -> ${node.getExpansion()} visited while visiting traversing tree") 
    }


    /**
    g -> GRAMMAR LPAREN gComp gPlus RPAREN
    */
    fun visit_g(node: ASTNode.InnerNode<MetaGrammarInfo.g>, value: A): R {
        throw IllegalStateException("Unexpected expansion ${node.getToken()} -> ${node.getExpansion()} visited while visiting traversing tree")
    }

    /**
    gComp -> COMPANION LPAREN gSynth gInh gCompv gStart RPAREN
    */
    fun visit_gComp(node: ASTNode.InnerNode<MetaGrammarInfo.gComp>, value: A): R {
        throw IllegalStateException("Unexpected expansion ${node.getToken()} -> ${node.getExpansion()} visited while visiting traversing tree")
    }

    fun visit_gSynth(node: ASTNode.InnerNode<MetaGrammarInfo.gSynth>, value: A): R {
        return when (val id = node.getExpansion().getId()) {
            0 -> visit_gSynth_0(node, value)
            1 -> visit_gSynth_1(node, value)
            else -> throw IllegalStateException("Unexpected expansion id $id in expansion of gSynth")
        }
    }

    /**
    gSynth -> SYNTHESIS LPAREN attribs RPAREN
    */
    fun visit_gSynth_0(node: ASTNode.InnerNode<MetaGrammarInfo.gSynth>, value: A): R {
        throw IllegalStateException("Unexpected expansion ${node.getToken()} -> ${node.getExpansion()} visited while visiting traversing tree") 
    }


    /**
    gSynth -> <eps>
    */
    fun visit_gSynth_1(node: ASTNode.InnerNode<MetaGrammarInfo.gSynth>, value: A): R {
        throw IllegalStateException("Unexpected expansion ${node.getToken()} -> ${node.getExpansion()} visited while visiting traversing tree") 
    }


    fun visit_gInh(node: ASTNode.InnerNode<MetaGrammarInfo.gInh>, value: A): R {
        return when (val id = node.getExpansion().getId()) {
            0 -> visit_gInh_0(node, value)
            1 -> visit_gInh_1(node, value)
            else -> throw IllegalStateException("Unexpected expansion id $id in expansion of gInh")
        }
    }

    /**
    gInh -> INHERITANCE LPAREN attribs RPAREN
    */
    fun visit_gInh_0(node: ASTNode.InnerNode<MetaGrammarInfo.gInh>, value: A): R {
        throw IllegalStateException("Unexpected expansion ${node.getToken()} -> ${node.getExpansion()} visited while visiting traversing tree") 
    }


    /**
    gInh -> <eps>
    */
    fun visit_gInh_1(node: ASTNode.InnerNode<MetaGrammarInfo.gInh>, value: A): R {
        throw IllegalStateException("Unexpected expansion ${node.getToken()} -> ${node.getExpansion()} visited while visiting traversing tree") 
    }


    fun visit_gCompv(node: ASTNode.InnerNode<MetaGrammarInfo.gCompv>, value: A): R {
        return when (val id = node.getExpansion().getId()) {
            0 -> visit_gCompv_0(node, value)
            1 -> visit_gCompv_1(node, value)
            else -> throw IllegalStateException("Unexpected expansion id $id in expansion of gCompv")
        }
    }

    /**
    gCompv -> COMPUTE LPAREN attribs RPAREN
    */
    fun visit_gCompv_0(node: ASTNode.InnerNode<MetaGrammarInfo.gCompv>, value: A): R {
        throw IllegalStateException("Unexpected expansion ${node.getToken()} -> ${node.getExpansion()} visited while visiting traversing tree") 
    }


    /**
    gCompv -> <eps>
    */
    fun visit_gCompv_1(node: ASTNode.InnerNode<MetaGrammarInfo.gCompv>, value: A): R {
        throw IllegalStateException("Unexpected expansion ${node.getToken()} -> ${node.getExpansion()} visited while visiting traversing tree") 
    }


    /**
    gStart -> START DESCRIBE CAMELNAME EOLN
    */
    fun visit_gStart(node: ASTNode.InnerNode<MetaGrammarInfo.gStart>, value: A): R {
        throw IllegalStateException("Unexpected expansion ${node.getToken()} -> ${node.getExpansion()} visited while visiting traversing tree")
    }

    /**
    gLine -> CAMELNAME def DESCRIBE rules EOLN
    */
    fun visit_gLine(node: ASTNode.InnerNode<MetaGrammarInfo.gLine>, value: A): R {
        throw IllegalStateException("Unexpected expansion ${node.getToken()} -> ${node.getExpansion()} visited while visiting traversing tree")
    }

    fun visit_gPlus(node: ASTNode.InnerNode<MetaGrammarInfo.gPlus>, value: A): R {
        return when (val id = node.getExpansion().getId()) {
            0 -> visit_gPlus_0(node, value)
            1 -> visit_gPlus_1(node, value)
            else -> throw IllegalStateException("Unexpected expansion id $id in expansion of gPlus")
        }
    }

    /**
    gPlus -> gLine gPlus
    */
    fun visit_gPlus_0(node: ASTNode.InnerNode<MetaGrammarInfo.gPlus>, value: A): R {
        throw IllegalStateException("Unexpected expansion ${node.getToken()} -> ${node.getExpansion()} visited while visiting traversing tree") 
    }


    /**
    gPlus -> <eps>
    */
    fun visit_gPlus_1(node: ASTNode.InnerNode<MetaGrammarInfo.gPlus>, value: A): R {
        throw IllegalStateException("Unexpected expansion ${node.getToken()} -> ${node.getExpansion()} visited while visiting traversing tree") 
    }


    /**
    attribs -> attrib attribsPlus
    */
    fun visit_attribs(node: ASTNode.InnerNode<MetaGrammarInfo.attribs>, value: A): R {
        throw IllegalStateException("Unexpected expansion ${node.getToken()} -> ${node.getExpansion()} visited while visiting traversing tree")
    }

    /**
    attrib -> CAMELNAME DESCRIBE type setDef EOLN
    */
    fun visit_attrib(node: ASTNode.InnerNode<MetaGrammarInfo.attrib>, value: A): R {
        throw IllegalStateException("Unexpected expansion ${node.getToken()} -> ${node.getExpansion()} visited while visiting traversing tree")
    }

    fun visit_attribsPlus(node: ASTNode.InnerNode<MetaGrammarInfo.attribsPlus>, value: A): R {
        return when (val id = node.getExpansion().getId()) {
            0 -> visit_attribsPlus_0(node, value)
            1 -> visit_attribsPlus_1(node, value)
            else -> throw IllegalStateException("Unexpected expansion id $id in expansion of attribsPlus")
        }
    }

    /**
    attribsPlus -> attrib attribsPlus
    */
    fun visit_attribsPlus_0(node: ASTNode.InnerNode<MetaGrammarInfo.attribsPlus>, value: A): R {
        throw IllegalStateException("Unexpected expansion ${node.getToken()} -> ${node.getExpansion()} visited while visiting traversing tree") 
    }


    /**
    attribsPlus -> <eps>
    */
    fun visit_attribsPlus_1(node: ASTNode.InnerNode<MetaGrammarInfo.attribsPlus>, value: A): R {
        throw IllegalStateException("Unexpected expansion ${node.getToken()} -> ${node.getExpansion()} visited while visiting traversing tree") 
    }


    fun visit_type(node: ASTNode.InnerNode<MetaGrammarInfo.type>, value: A): R {
        return when (val id = node.getExpansion().getId()) {
            0 -> visit_type_0(node, value)
            1 -> visit_type_1(node, value)
            2 -> visit_type_2(node, value)
            else -> throw IllegalStateException("Unexpected expansion id $id in expansion of type")
        }
    }

    /**
    type -> INT_TYPE
    */
    fun visit_type_0(node: ASTNode.InnerNode<MetaGrammarInfo.type>, value: A): R {
        throw IllegalStateException("Unexpected expansion ${node.getToken()} -> ${node.getExpansion()} visited while visiting traversing tree") 
    }


    /**
    type -> DOUBLE_TYPE
    */
    fun visit_type_1(node: ASTNode.InnerNode<MetaGrammarInfo.type>, value: A): R {
        throw IllegalStateException("Unexpected expansion ${node.getToken()} -> ${node.getExpansion()} visited while visiting traversing tree") 
    }


    /**
    type -> STRING_TYPE
    */
    fun visit_type_2(node: ASTNode.InnerNode<MetaGrammarInfo.type>, value: A): R {
        throw IllegalStateException("Unexpected expansion ${node.getToken()} -> ${node.getExpansion()} visited while visiting traversing tree") 
    }


    /**
    rules -> rule rulesPlus
    */
    fun visit_rules(node: ASTNode.InnerNode<MetaGrammarInfo.rules>, value: A): R {
        throw IllegalStateException("Unexpected expansion ${node.getToken()} -> ${node.getExpansion()} visited while visiting traversing tree")
    }

    /**
    rule -> seq def
    */
    fun visit_rule(node: ASTNode.InnerNode<MetaGrammarInfo.rule>, value: A): R {
        throw IllegalStateException("Unexpected expansion ${node.getToken()} -> ${node.getExpansion()} visited while visiting traversing tree")
    }

    fun visit_rulesPlus(node: ASTNode.InnerNode<MetaGrammarInfo.rulesPlus>, value: A): R {
        return when (val id = node.getExpansion().getId()) {
            0 -> visit_rulesPlus_0(node, value)
            1 -> visit_rulesPlus_1(node, value)
            else -> throw IllegalStateException("Unexpected expansion id $id in expansion of rulesPlus")
        }
    }

    /**
    rulesPlus -> CHOICE rule rulesPlus
    */
    fun visit_rulesPlus_0(node: ASTNode.InnerNode<MetaGrammarInfo.rulesPlus>, value: A): R {
        throw IllegalStateException("Unexpected expansion ${node.getToken()} -> ${node.getExpansion()} visited while visiting traversing tree") 
    }


    /**
    rulesPlus -> <eps>
    */
    fun visit_rulesPlus_1(node: ASTNode.InnerNode<MetaGrammarInfo.rulesPlus>, value: A): R {
        throw IllegalStateException("Unexpected expansion ${node.getToken()} -> ${node.getExpansion()} visited while visiting traversing tree") 
    }


    fun visit_def(node: ASTNode.InnerNode<MetaGrammarInfo.def>, value: A): R {
        return when (val id = node.getExpansion().getId()) {
            0 -> visit_def_0(node, value)
            1 -> visit_def_1(node, value)
            else -> throw IllegalStateException("Unexpected expansion id $id in expansion of def")
        }
    }

    /**
    def -> DEFINE LPAREN defBody RPAREN
    */
    fun visit_def_0(node: ASTNode.InnerNode<MetaGrammarInfo.def>, value: A): R {
        throw IllegalStateException("Unexpected expansion ${node.getToken()} -> ${node.getExpansion()} visited while visiting traversing tree") 
    }


    /**
    def -> <eps>
    */
    fun visit_def_1(node: ASTNode.InnerNode<MetaGrammarInfo.def>, value: A): R {
        throw IllegalStateException("Unexpected expansion ${node.getToken()} -> ${node.getExpansion()} visited while visiting traversing tree") 
    }


    fun visit_pass(node: ASTNode.InnerNode<MetaGrammarInfo.pass>, value: A): R {
        return when (val id = node.getExpansion().getId()) {
            0 -> visit_pass_0(node, value)
            1 -> visit_pass_1(node, value)
            else -> throw IllegalStateException("Unexpected expansion id $id in expansion of pass")
        }
    }

    /**
    pass -> LPAREN defBody RPAREN
    */
    fun visit_pass_0(node: ASTNode.InnerNode<MetaGrammarInfo.pass>, value: A): R {
        throw IllegalStateException("Unexpected expansion ${node.getToken()} -> ${node.getExpansion()} visited while visiting traversing tree") 
    }


    /**
    pass -> <eps>
    */
    fun visit_pass_1(node: ASTNode.InnerNode<MetaGrammarInfo.pass>, value: A): R {
        throw IllegalStateException("Unexpected expansion ${node.getToken()} -> ${node.getExpansion()} visited while visiting traversing tree") 
    }


    /**
    defBody -> defAtom defPlus
    */
    fun visit_defBody(node: ASTNode.InnerNode<MetaGrammarInfo.defBody>, value: A): R {
        throw IllegalStateException("Unexpected expansion ${node.getToken()} -> ${node.getExpansion()} visited while visiting traversing tree")
    }

    /**
    defAtom -> CAMELNAME ASSIGN defValue
    */
    fun visit_defAtom(node: ASTNode.InnerNode<MetaGrammarInfo.defAtom>, value: A): R {
        throw IllegalStateException("Unexpected expansion ${node.getToken()} -> ${node.getExpansion()} visited while visiting traversing tree")
    }

    fun visit_defValue(node: ASTNode.InnerNode<MetaGrammarInfo.defValue>, value: A): R {
        return when (val id = node.getExpansion().getId()) {
            0 -> visit_defValue_0(node, value)
            1 -> visit_defValue_1(node, value)
            2 -> visit_defValue_2(node, value)
            else -> throw IllegalStateException("Unexpected expansion id $id in expansion of defValue")
        }
    }

    /**
    defValue -> STRING
    */
    fun visit_defValue_0(node: ASTNode.InnerNode<MetaGrammarInfo.defValue>, value: A): R {
        throw IllegalStateException("Unexpected expansion ${node.getToken()} -> ${node.getExpansion()} visited while visiting traversing tree") 
    }


    /**
    defValue -> defTerm defMod
    */
    fun visit_defValue_1(node: ASTNode.InnerNode<MetaGrammarInfo.defValue>, value: A): R {
        throw IllegalStateException("Unexpected expansion ${node.getToken()} -> ${node.getExpansion()} visited while visiting traversing tree") 
    }


    /**
    defValue -> SUB defTerm
    */
    fun visit_defValue_2(node: ASTNode.InnerNode<MetaGrammarInfo.defValue>, value: A): R {
        throw IllegalStateException("Unexpected expansion ${node.getToken()} -> ${node.getExpansion()} visited while visiting traversing tree") 
    }


    fun visit_defTerm(node: ASTNode.InnerNode<MetaGrammarInfo.defTerm>, value: A): R {
        return when (val id = node.getExpansion().getId()) {
            0 -> visit_defTerm_0(node, value)
            1 -> visit_defTerm_1(node, value)
            2 -> visit_defTerm_2(node, value)
            else -> throw IllegalStateException("Unexpected expansion id $id in expansion of defTerm")
        }
    }

    /**
    defTerm -> atName
    */
    fun visit_defTerm_0(node: ASTNode.InnerNode<MetaGrammarInfo.defTerm>, value: A): R {
        throw IllegalStateException("Unexpected expansion ${node.getToken()} -> ${node.getExpansion()} visited while visiting traversing tree") 
    }


    /**
    defTerm -> INT
    */
    fun visit_defTerm_1(node: ASTNode.InnerNode<MetaGrammarInfo.defTerm>, value: A): R {
        throw IllegalStateException("Unexpected expansion ${node.getToken()} -> ${node.getExpansion()} visited while visiting traversing tree") 
    }


    /**
    defTerm -> DOUBLE
    */
    fun visit_defTerm_2(node: ASTNode.InnerNode<MetaGrammarInfo.defTerm>, value: A): R {
        throw IllegalStateException("Unexpected expansion ${node.getToken()} -> ${node.getExpansion()} visited while visiting traversing tree") 
    }


    fun visit_defMod(node: ASTNode.InnerNode<MetaGrammarInfo.defMod>, value: A): R {
        return when (val id = node.getExpansion().getId()) {
            0 -> visit_defMod_0(node, value)
            1 -> visit_defMod_1(node, value)
            else -> throw IllegalStateException("Unexpected expansion id $id in expansion of defMod")
        }
    }

    /**
    defMod -> op defTerm
    */
    fun visit_defMod_0(node: ASTNode.InnerNode<MetaGrammarInfo.defMod>, value: A): R {
        throw IllegalStateException("Unexpected expansion ${node.getToken()} -> ${node.getExpansion()} visited while visiting traversing tree") 
    }


    /**
    defMod -> <eps>
    */
    fun visit_defMod_1(node: ASTNode.InnerNode<MetaGrammarInfo.defMod>, value: A): R {
        throw IllegalStateException("Unexpected expansion ${node.getToken()} -> ${node.getExpansion()} visited while visiting traversing tree") 
    }


    fun visit_setDef(node: ASTNode.InnerNode<MetaGrammarInfo.setDef>, value: A): R {
        return when (val id = node.getExpansion().getId()) {
            0 -> visit_setDef_0(node, value)
            1 -> visit_setDef_1(node, value)
            else -> throw IllegalStateException("Unexpected expansion id $id in expansion of setDef")
        }
    }

    /**
    setDef -> DEFINE LPAREN DEFAULT ASSIGN defValue RPAREN
    */
    fun visit_setDef_0(node: ASTNode.InnerNode<MetaGrammarInfo.setDef>, value: A): R {
        throw IllegalStateException("Unexpected expansion ${node.getToken()} -> ${node.getExpansion()} visited while visiting traversing tree") 
    }


    /**
    setDef -> <eps>
    */
    fun visit_setDef_1(node: ASTNode.InnerNode<MetaGrammarInfo.setDef>, value: A): R {
        throw IllegalStateException("Unexpected expansion ${node.getToken()} -> ${node.getExpansion()} visited while visiting traversing tree") 
    }


    fun visit_op(node: ASTNode.InnerNode<MetaGrammarInfo.op>, value: A): R {
        return when (val id = node.getExpansion().getId()) {
            0 -> visit_op_0(node, value)
            1 -> visit_op_1(node, value)
            2 -> visit_op_2(node, value)
            3 -> visit_op_3(node, value)
            else -> throw IllegalStateException("Unexpected expansion id $id in expansion of op")
        }
    }

    /**
    op -> ADD
    */
    fun visit_op_0(node: ASTNode.InnerNode<MetaGrammarInfo.op>, value: A): R {
        throw IllegalStateException("Unexpected expansion ${node.getToken()} -> ${node.getExpansion()} visited while visiting traversing tree") 
    }


    /**
    op -> SUB
    */
    fun visit_op_1(node: ASTNode.InnerNode<MetaGrammarInfo.op>, value: A): R {
        throw IllegalStateException("Unexpected expansion ${node.getToken()} -> ${node.getExpansion()} visited while visiting traversing tree") 
    }


    /**
    op -> MUL
    */
    fun visit_op_2(node: ASTNode.InnerNode<MetaGrammarInfo.op>, value: A): R {
        throw IllegalStateException("Unexpected expansion ${node.getToken()} -> ${node.getExpansion()} visited while visiting traversing tree") 
    }


    /**
    op -> DIV
    */
    fun visit_op_3(node: ASTNode.InnerNode<MetaGrammarInfo.op>, value: A): R {
        throw IllegalStateException("Unexpected expansion ${node.getToken()} -> ${node.getExpansion()} visited while visiting traversing tree") 
    }


    fun visit_defPlus(node: ASTNode.InnerNode<MetaGrammarInfo.defPlus>, value: A): R {
        return when (val id = node.getExpansion().getId()) {
            0 -> visit_defPlus_0(node, value)
            1 -> visit_defPlus_1(node, value)
            else -> throw IllegalStateException("Unexpected expansion id $id in expansion of defPlus")
        }
    }

    /**
    defPlus -> SEP defAtom defPlus
    */
    fun visit_defPlus_0(node: ASTNode.InnerNode<MetaGrammarInfo.defPlus>, value: A): R {
        throw IllegalStateException("Unexpected expansion ${node.getToken()} -> ${node.getExpansion()} visited while visiting traversing tree") 
    }


    /**
    defPlus -> <eps>
    */
    fun visit_defPlus_1(node: ASTNode.InnerNode<MetaGrammarInfo.defPlus>, value: A): R {
        throw IllegalStateException("Unexpected expansion ${node.getToken()} -> ${node.getExpansion()} visited while visiting traversing tree") 
    }


    /**
    macroBody -> defValue macroPlus
    */
    fun visit_macroBody(node: ASTNode.InnerNode<MetaGrammarInfo.macroBody>, value: A): R {
        throw IllegalStateException("Unexpected expansion ${node.getToken()} -> ${node.getExpansion()} visited while visiting traversing tree")
    }

    fun visit_macroPlus(node: ASTNode.InnerNode<MetaGrammarInfo.macroPlus>, value: A): R {
        return when (val id = node.getExpansion().getId()) {
            0 -> visit_macroPlus_0(node, value)
            1 -> visit_macroPlus_1(node, value)
            else -> throw IllegalStateException("Unexpected expansion id $id in expansion of macroPlus")
        }
    }

    /**
    macroPlus -> SEP defValue macroPlus
    */
    fun visit_macroPlus_0(node: ASTNode.InnerNode<MetaGrammarInfo.macroPlus>, value: A): R {
        throw IllegalStateException("Unexpected expansion ${node.getToken()} -> ${node.getExpansion()} visited while visiting traversing tree") 
    }


    /**
    macroPlus -> <eps>
    */
    fun visit_macroPlus_1(node: ASTNode.InnerNode<MetaGrammarInfo.macroPlus>, value: A): R {
        throw IllegalStateException("Unexpected expansion ${node.getToken()} -> ${node.getExpansion()} visited while visiting traversing tree") 
    }


    /**
    seq -> atom seqPlus
    */
    fun visit_seq(node: ASTNode.InnerNode<MetaGrammarInfo.seq>, value: A): R {
        throw IllegalStateException("Unexpected expansion ${node.getToken()} -> ${node.getExpansion()} visited while visiting traversing tree")
    }

    fun visit_atom(node: ASTNode.InnerNode<MetaGrammarInfo.atom>, value: A): R {
        return when (val id = node.getExpansion().getId()) {
            0 -> visit_atom_0(node, value)
            1 -> visit_atom_1(node, value)
            else -> throw IllegalStateException("Unexpected expansion id $id in expansion of atom")
        }
    }

    /**
    atom -> CAPSNAME
    */
    fun visit_atom_0(node: ASTNode.InnerNode<MetaGrammarInfo.atom>, value: A): R {
        throw IllegalStateException("Unexpected expansion ${node.getToken()} -> ${node.getExpansion()} visited while visiting traversing tree") 
    }


    /**
    atom -> CAMELNAME pass
    */
    fun visit_atom_1(node: ASTNode.InnerNode<MetaGrammarInfo.atom>, value: A): R {
        throw IllegalStateException("Unexpected expansion ${node.getToken()} -> ${node.getExpansion()} visited while visiting traversing tree") 
    }


    fun visit_seqPlus(node: ASTNode.InnerNode<MetaGrammarInfo.seqPlus>, value: A): R {
        return when (val id = node.getExpansion().getId()) {
            0 -> visit_seqPlus_0(node, value)
            1 -> visit_seqPlus_1(node, value)
            else -> throw IllegalStateException("Unexpected expansion id $id in expansion of seqPlus")
        }
    }

    /**
    seqPlus -> atom seqPlus
    */
    fun visit_seqPlus_0(node: ASTNode.InnerNode<MetaGrammarInfo.seqPlus>, value: A): R {
        throw IllegalStateException("Unexpected expansion ${node.getToken()} -> ${node.getExpansion()} visited while visiting traversing tree") 
    }


    /**
    seqPlus -> <eps>
    */
    fun visit_seqPlus_1(node: ASTNode.InnerNode<MetaGrammarInfo.seqPlus>, value: A): R {
        throw IllegalStateException("Unexpected expansion ${node.getToken()} -> ${node.getExpansion()} visited while visiting traversing tree") 
    }


    fun visit_atName(node: ASTNode.InnerNode<MetaGrammarInfo.atName>, value: A): R {
        return when (val id = node.getExpansion().getId()) {
            0 -> visit_atName_0(node, value)
            1 -> visit_atName_1(node, value)
            2 -> visit_atName_2(node, value)
            else -> throw IllegalStateException("Unexpected expansion id $id in expansion of atName")
        }
    }

    /**
    atName -> SPNAME
    */
    fun visit_atName_0(node: ASTNode.InnerNode<MetaGrammarInfo.atName>, value: A): R {
        throw IllegalStateException("Unexpected expansion ${node.getToken()} -> ${node.getExpansion()} visited while visiting traversing tree") 
    }


    /**
    atName -> CAMELNAME
    */
    fun visit_atName_1(node: ASTNode.InnerNode<MetaGrammarInfo.atName>, value: A): R {
        throw IllegalStateException("Unexpected expansion ${node.getToken()} -> ${node.getExpansion()} visited while visiting traversing tree") 
    }


    /**
    atName -> MACROREF CAMELNAME LBRACKET macroBody RBRACKET
    */
    fun visit_atName_2(node: ASTNode.InnerNode<MetaGrammarInfo.atName>, value: A): R {
        throw IllegalStateException("Unexpected expansion ${node.getToken()} -> ${node.getExpansion()} visited while visiting traversing tree") 
    }


}