/**
This code is generated by [translate.codegen.VisitorBuilder] by provided [structure.Description]
*/

package translate.meta

import structure.Visitor
import structure.ASTNode
import grammar.token.Token
import translate.meta.MetaDescription

@Suppress("UNCHECKED_CAST")
abstract class MetaBaseVisitor2<R> : Visitor<R> {

/*
Start: all
all -> m t g
m -> MACRO LPAREN kfPlus RPAREN | <eps>
kfPlus -> KOTLIN_FUNC kfPlus | <eps>
t -> TOKENS LPAREN tComp tFrag tPlus RPAREN
tComp -> COMPANION LPAREN tSkip RPAREN | <eps>
tSkip -> SKIP DESCRIBE tArray EOLN
tArray -> LARRAY CAPSNAME tArrayPlus RARRAY
tArrayPlus -> SEP CAPSNAME tArrayPlus | <eps>
tFrag -> FRAGMENTS LPAREN tFragPlus RPAREN | <eps>
tFragPlus -> tFragLine tFragPlus | <eps>
tFragLine -> CAPSNAME DESCRIBE STRING EOLN
tPlus -> tLine tPlus | <eps>
tLine -> CAPSNAME DESCRIBE tDef EOLN
tDef -> STRING | RSTRING | LTRIG CHAR CHARRANGE CHAR RTRIG
g -> GRAMMAR LPAREN gComp gPlus RPAREN
gComp -> COMPANION LPAREN gSynth gInh gCompv gStart RPAREN
gSynth -> SYNTHESIS LPAREN attribs RPAREN | <eps>
gInh -> INHERITANCE LPAREN attribs RPAREN | <eps>
gCompv -> COMPUTE LPAREN attribs RPAREN | <eps>
gStart -> START DESCRIBE CAMELNAME EOLN
attribs -> attrib attribsPlus
attrib -> CAMELNAME DESCRIBE type setDef EOLN
type -> INT_TYPE | DOUBLE_TYPE | STRING_TYPE
setDef -> DEFINE LPAREN DEFAULT ASSIGN defValue RPAREN | <eps>
attribsPlus -> attrib attribsPlus | <eps>
gPlus -> gLine gPlus | <eps>
gLine -> CAMELNAME def DESCRIBE rules EOLN
rules -> rule rulesPlus
rule -> seq def
seq -> atom seqPlus
atom -> CAPSNAME | CAMELNAME pass
pass -> LPAREN defBody RPAREN | <eps>
seqPlus -> atom seqPlus | <eps>
rulesPlus -> CHOICE rule rulesPlus | <eps>
def -> DEFINE LPAREN defBody RPAREN | <eps>
defBody -> defAtom defPlus
defAtom -> CAMELNAME ASSIGN defValue
defValue -> STRING | defTerm defMod | SUB defTerm
defTerm -> atName | INT | DOUBLE
defMod -> op defTerm | <eps>
op -> ADD | SUB | MUL | DIV
atName -> SPNAME | CAMELNAME
defPlus -> SEP defAtom defPlus | <eps>
*/

    override fun visit(node: ASTNode<out Token>): R {
        return when(node.getToken()) {
			MetaDescription.LPAREN -> visit_LPAREN(node as ASTNode.TerminalNode<MetaDescription.LPAREN>)
			MetaDescription.RPAREN -> visit_RPAREN(node as ASTNode.TerminalNode<MetaDescription.RPAREN>)
			MetaDescription.EOLN -> visit_EOLN(node as ASTNode.TerminalNode<MetaDescription.EOLN>)
			MetaDescription.DEFINE -> visit_DEFINE(node as ASTNode.TerminalNode<MetaDescription.DEFINE>)
			MetaDescription.DESCRIBE -> visit_DESCRIBE(node as ASTNode.TerminalNode<MetaDescription.DESCRIBE>)
			MetaDescription.CHOICE -> visit_CHOICE(node as ASTNode.TerminalNode<MetaDescription.CHOICE>)
			MetaDescription.LTRIG -> visit_LTRIG(node as ASTNode.TerminalNode<MetaDescription.LTRIG>)
			MetaDescription.RTRIG -> visit_RTRIG(node as ASTNode.TerminalNode<MetaDescription.RTRIG>)
			MetaDescription.CHARRANGE -> visit_CHARRANGE(node as ASTNode.TerminalNode<MetaDescription.CHARRANGE>)
			MetaDescription.ASSIGN -> visit_ASSIGN(node as ASTNode.TerminalNode<MetaDescription.ASSIGN>)
			MetaDescription.ADD -> visit_ADD(node as ASTNode.TerminalNode<MetaDescription.ADD>)
			MetaDescription.SUB -> visit_SUB(node as ASTNode.TerminalNode<MetaDescription.SUB>)
			MetaDescription.MUL -> visit_MUL(node as ASTNode.TerminalNode<MetaDescription.MUL>)
			MetaDescription.DIV -> visit_DIV(node as ASTNode.TerminalNode<MetaDescription.DIV>)
			MetaDescription.LARRAY -> visit_LARRAY(node as ASTNode.TerminalNode<MetaDescription.LARRAY>)
			MetaDescription.RARRAY -> visit_RARRAY(node as ASTNode.TerminalNode<MetaDescription.RARRAY>)
			MetaDescription.SEP -> visit_SEP(node as ASTNode.TerminalNode<MetaDescription.SEP>)
			MetaDescription.MACRO -> visit_MACRO(node as ASTNode.TerminalNode<MetaDescription.MACRO>)
			MetaDescription.TOKENS -> visit_TOKENS(node as ASTNode.TerminalNode<MetaDescription.TOKENS>)
			MetaDescription.GRAMMAR -> visit_GRAMMAR(node as ASTNode.TerminalNode<MetaDescription.GRAMMAR>)
			MetaDescription.FRAGMENTS -> visit_FRAGMENTS(node as ASTNode.TerminalNode<MetaDescription.FRAGMENTS>)
			MetaDescription.COMPANION -> visit_COMPANION(node as ASTNode.TerminalNode<MetaDescription.COMPANION>)
			MetaDescription.SKIP -> visit_SKIP(node as ASTNode.TerminalNode<MetaDescription.SKIP>)
			MetaDescription.SYNTHESIS -> visit_SYNTHESIS(node as ASTNode.TerminalNode<MetaDescription.SYNTHESIS>)
			MetaDescription.INHERITANCE -> visit_INHERITANCE(node as ASTNode.TerminalNode<MetaDescription.INHERITANCE>)
			MetaDescription.COMPUTE -> visit_COMPUTE(node as ASTNode.TerminalNode<MetaDescription.COMPUTE>)
			MetaDescription.START -> visit_START(node as ASTNode.TerminalNode<MetaDescription.START>)
			MetaDescription.DEFAULT -> visit_DEFAULT(node as ASTNode.TerminalNode<MetaDescription.DEFAULT>)
			MetaDescription.INT_TYPE -> visit_INT_TYPE(node as ASTNode.TerminalNode<MetaDescription.INT_TYPE>)
			MetaDescription.DOUBLE_TYPE -> visit_DOUBLE_TYPE(node as ASTNode.TerminalNode<MetaDescription.DOUBLE_TYPE>)
			MetaDescription.STRING_TYPE -> visit_STRING_TYPE(node as ASTNode.TerminalNode<MetaDescription.STRING_TYPE>)
			MetaDescription.KOTLIN_FUNC -> visit_KOTLIN_FUNC(node as ASTNode.TerminalNode<Token.VariantToken.VariantInstanceToken<MetaDescription.KOTLIN_FUNC>>)
			MetaDescription.DOUBLE -> visit_DOUBLE(node as ASTNode.TerminalNode<Token.VariantToken.VariantInstanceToken<MetaDescription.DOUBLE>>)
			MetaDescription.INT -> visit_INT(node as ASTNode.TerminalNode<Token.VariantToken.VariantInstanceToken<MetaDescription.INT>>)
			MetaDescription.CHAR -> visit_CHAR(node as ASTNode.TerminalNode<Token.VariantToken.VariantInstanceToken<MetaDescription.CHAR>>)
			MetaDescription.STRING -> visit_STRING(node as ASTNode.TerminalNode<Token.VariantToken.VariantInstanceToken<MetaDescription.STRING>>)
			MetaDescription.RSTRING -> visit_RSTRING(node as ASTNode.TerminalNode<Token.VariantToken.VariantInstanceToken<MetaDescription.RSTRING>>)
			MetaDescription.SPNAME -> visit_SPNAME(node as ASTNode.TerminalNode<Token.VariantToken.VariantInstanceToken<MetaDescription.SPNAME>>)
			MetaDescription.CAMELNAME -> visit_CAMELNAME(node as ASTNode.TerminalNode<Token.VariantToken.VariantInstanceToken<MetaDescription.CAMELNAME>>)
			MetaDescription.CAPSNAME -> visit_CAPSNAME(node as ASTNode.TerminalNode<Token.VariantToken.VariantInstanceToken<MetaDescription.CAPSNAME>>)
			MetaDescription.WHITESPACE -> visit_WHITESPACE(node as ASTNode.TerminalNode<Token.VariantToken.VariantInstanceToken<MetaDescription.WHITESPACE>>)
			MetaDescription.all -> visit_all(node as ASTNode.InnerNode<MetaDescription.all>)
			MetaDescription.m -> visit_m(node as ASTNode.InnerNode<MetaDescription.m>)
			MetaDescription.t -> visit_t(node as ASTNode.InnerNode<MetaDescription.t>)
			MetaDescription.g -> visit_g(node as ASTNode.InnerNode<MetaDescription.g>)
			MetaDescription.kfPlus -> visit_kfPlus(node as ASTNode.InnerNode<MetaDescription.kfPlus>)
			MetaDescription.tComp -> visit_tComp(node as ASTNode.InnerNode<MetaDescription.tComp>)
			MetaDescription.tFrag -> visit_tFrag(node as ASTNode.InnerNode<MetaDescription.tFrag>)
			MetaDescription.tPlus -> visit_tPlus(node as ASTNode.InnerNode<MetaDescription.tPlus>)
			MetaDescription.tSkip -> visit_tSkip(node as ASTNode.InnerNode<MetaDescription.tSkip>)
			MetaDescription.tArray -> visit_tArray(node as ASTNode.InnerNode<MetaDescription.tArray>)
			MetaDescription.tArrayPlus -> visit_tArrayPlus(node as ASTNode.InnerNode<MetaDescription.tArrayPlus>)
			MetaDescription.tFragPlus -> visit_tFragPlus(node as ASTNode.InnerNode<MetaDescription.tFragPlus>)
			MetaDescription.tFragLine -> visit_tFragLine(node as ASTNode.InnerNode<MetaDescription.tFragLine>)
			MetaDescription.tLine -> visit_tLine(node as ASTNode.InnerNode<MetaDescription.tLine>)
			MetaDescription.tDef -> visit_tDef(node as ASTNode.InnerNode<MetaDescription.tDef>)
			MetaDescription.gComp -> visit_gComp(node as ASTNode.InnerNode<MetaDescription.gComp>)
			MetaDescription.gPlus -> visit_gPlus(node as ASTNode.InnerNode<MetaDescription.gPlus>)
			MetaDescription.gSynth -> visit_gSynth(node as ASTNode.InnerNode<MetaDescription.gSynth>)
			MetaDescription.gInh -> visit_gInh(node as ASTNode.InnerNode<MetaDescription.gInh>)
			MetaDescription.gCompv -> visit_gCompv(node as ASTNode.InnerNode<MetaDescription.gCompv>)
			MetaDescription.gStart -> visit_gStart(node as ASTNode.InnerNode<MetaDescription.gStart>)
			MetaDescription.attribs -> visit_attribs(node as ASTNode.InnerNode<MetaDescription.attribs>)
			MetaDescription.attrib -> visit_attrib(node as ASTNode.InnerNode<MetaDescription.attrib>)
			MetaDescription.attribsPlus -> visit_attribsPlus(node as ASTNode.InnerNode<MetaDescription.attribsPlus>)
			MetaDescription.type -> visit_type(node as ASTNode.InnerNode<MetaDescription.type>)
			MetaDescription.setDef -> visit_setDef(node as ASTNode.InnerNode<MetaDescription.setDef>)
			MetaDescription.defValue -> visit_defValue(node as ASTNode.InnerNode<MetaDescription.defValue>)
			MetaDescription.gLine -> visit_gLine(node as ASTNode.InnerNode<MetaDescription.gLine>)
			MetaDescription.def -> visit_def(node as ASTNode.InnerNode<MetaDescription.def>)
			MetaDescription.rules -> visit_rules(node as ASTNode.InnerNode<MetaDescription.rules>)
			MetaDescription.rule -> visit_rule(node as ASTNode.InnerNode<MetaDescription.rule>)
			MetaDescription.rulesPlus -> visit_rulesPlus(node as ASTNode.InnerNode<MetaDescription.rulesPlus>)
			MetaDescription.seq -> visit_seq(node as ASTNode.InnerNode<MetaDescription.seq>)
			MetaDescription.atom -> visit_atom(node as ASTNode.InnerNode<MetaDescription.atom>)
			MetaDescription.seqPlus -> visit_seqPlus(node as ASTNode.InnerNode<MetaDescription.seqPlus>)
			MetaDescription.pass -> visit_pass(node as ASTNode.InnerNode<MetaDescription.pass>)
			MetaDescription.defBody -> visit_defBody(node as ASTNode.InnerNode<MetaDescription.defBody>)
			MetaDescription.defAtom -> visit_defAtom(node as ASTNode.InnerNode<MetaDescription.defAtom>)
			MetaDescription.defPlus -> visit_defPlus(node as ASTNode.InnerNode<MetaDescription.defPlus>)
			MetaDescription.defTerm -> visit_defTerm(node as ASTNode.InnerNode<MetaDescription.defTerm>)
			MetaDescription.defMod -> visit_defMod(node as ASTNode.InnerNode<MetaDescription.defMod>)
			MetaDescription.atName -> visit_atName(node as ASTNode.InnerNode<MetaDescription.atName>)
			MetaDescription.op -> visit_op(node as ASTNode.InnerNode<MetaDescription.op>)
            else -> throw IllegalStateException("Unknown token ${node.getToken()} met")
        }
    }
    
    abstract fun <T : Token> visitTerminal(token: T): R
    
	open fun visit_LPAREN(node: ASTNode.TerminalNode<MetaDescription.LPAREN>): R {
		return visitTerminal(node.getToken())
	}
	open fun visit_RPAREN(node: ASTNode.TerminalNode<MetaDescription.RPAREN>): R {
		return visitTerminal(node.getToken())
	}
	open fun visit_EOLN(node: ASTNode.TerminalNode<MetaDescription.EOLN>): R {
		return visitTerminal(node.getToken())
	}
	open fun visit_DEFINE(node: ASTNode.TerminalNode<MetaDescription.DEFINE>): R {
		return visitTerminal(node.getToken())
	}
	open fun visit_DESCRIBE(node: ASTNode.TerminalNode<MetaDescription.DESCRIBE>): R {
		return visitTerminal(node.getToken())
	}
	open fun visit_CHOICE(node: ASTNode.TerminalNode<MetaDescription.CHOICE>): R {
		return visitTerminal(node.getToken())
	}
	open fun visit_LTRIG(node: ASTNode.TerminalNode<MetaDescription.LTRIG>): R {
		return visitTerminal(node.getToken())
	}
	open fun visit_RTRIG(node: ASTNode.TerminalNode<MetaDescription.RTRIG>): R {
		return visitTerminal(node.getToken())
	}
	open fun visit_CHARRANGE(node: ASTNode.TerminalNode<MetaDescription.CHARRANGE>): R {
		return visitTerminal(node.getToken())
	}
	open fun visit_ASSIGN(node: ASTNode.TerminalNode<MetaDescription.ASSIGN>): R {
		return visitTerminal(node.getToken())
	}
	open fun visit_ADD(node: ASTNode.TerminalNode<MetaDescription.ADD>): R {
		return visitTerminal(node.getToken())
	}
	open fun visit_SUB(node: ASTNode.TerminalNode<MetaDescription.SUB>): R {
		return visitTerminal(node.getToken())
	}
	open fun visit_MUL(node: ASTNode.TerminalNode<MetaDescription.MUL>): R {
		return visitTerminal(node.getToken())
	}
	open fun visit_DIV(node: ASTNode.TerminalNode<MetaDescription.DIV>): R {
		return visitTerminal(node.getToken())
	}
	open fun visit_LARRAY(node: ASTNode.TerminalNode<MetaDescription.LARRAY>): R {
		return visitTerminal(node.getToken())
	}
	open fun visit_RARRAY(node: ASTNode.TerminalNode<MetaDescription.RARRAY>): R {
		return visitTerminal(node.getToken())
	}
	open fun visit_SEP(node: ASTNode.TerminalNode<MetaDescription.SEP>): R {
		return visitTerminal(node.getToken())
	}
	open fun visit_MACRO(node: ASTNode.TerminalNode<MetaDescription.MACRO>): R {
		return visitTerminal(node.getToken())
	}
	open fun visit_TOKENS(node: ASTNode.TerminalNode<MetaDescription.TOKENS>): R {
		return visitTerminal(node.getToken())
	}
	open fun visit_GRAMMAR(node: ASTNode.TerminalNode<MetaDescription.GRAMMAR>): R {
		return visitTerminal(node.getToken())
	}
	open fun visit_FRAGMENTS(node: ASTNode.TerminalNode<MetaDescription.FRAGMENTS>): R {
		return visitTerminal(node.getToken())
	}
	open fun visit_COMPANION(node: ASTNode.TerminalNode<MetaDescription.COMPANION>): R {
		return visitTerminal(node.getToken())
	}
	open fun visit_SKIP(node: ASTNode.TerminalNode<MetaDescription.SKIP>): R {
		return visitTerminal(node.getToken())
	}
	open fun visit_SYNTHESIS(node: ASTNode.TerminalNode<MetaDescription.SYNTHESIS>): R {
		return visitTerminal(node.getToken())
	}
	open fun visit_INHERITANCE(node: ASTNode.TerminalNode<MetaDescription.INHERITANCE>): R {
		return visitTerminal(node.getToken())
	}
	open fun visit_COMPUTE(node: ASTNode.TerminalNode<MetaDescription.COMPUTE>): R {
		return visitTerminal(node.getToken())
	}
	open fun visit_START(node: ASTNode.TerminalNode<MetaDescription.START>): R {
		return visitTerminal(node.getToken())
	}
	open fun visit_DEFAULT(node: ASTNode.TerminalNode<MetaDescription.DEFAULT>): R {
		return visitTerminal(node.getToken())
	}
	open fun visit_INT_TYPE(node: ASTNode.TerminalNode<MetaDescription.INT_TYPE>): R {
		return visitTerminal(node.getToken())
	}
	open fun visit_DOUBLE_TYPE(node: ASTNode.TerminalNode<MetaDescription.DOUBLE_TYPE>): R {
		return visitTerminal(node.getToken())
	}
	open fun visit_STRING_TYPE(node: ASTNode.TerminalNode<MetaDescription.STRING_TYPE>): R {
		return visitTerminal(node.getToken())
	}
	open fun visit_KOTLIN_FUNC(node: ASTNode.TerminalNode<Token.VariantToken.VariantInstanceToken<MetaDescription.KOTLIN_FUNC>>): R {
		return visitTerminal(node.getToken())
	}
	open fun visit_DOUBLE(node: ASTNode.TerminalNode<Token.VariantToken.VariantInstanceToken<MetaDescription.DOUBLE>>): R {
		return visitTerminal(node.getToken())
	}
	open fun visit_INT(node: ASTNode.TerminalNode<Token.VariantToken.VariantInstanceToken<MetaDescription.INT>>): R {
		return visitTerminal(node.getToken())
	}
	open fun visit_CHAR(node: ASTNode.TerminalNode<Token.VariantToken.VariantInstanceToken<MetaDescription.CHAR>>): R {
		return visitTerminal(node.getToken())
	}
	open fun visit_STRING(node: ASTNode.TerminalNode<Token.VariantToken.VariantInstanceToken<MetaDescription.STRING>>): R {
		return visitTerminal(node.getToken())
	}
	open fun visit_RSTRING(node: ASTNode.TerminalNode<Token.VariantToken.VariantInstanceToken<MetaDescription.RSTRING>>): R {
		return visitTerminal(node.getToken())
	}
	open fun visit_SPNAME(node: ASTNode.TerminalNode<Token.VariantToken.VariantInstanceToken<MetaDescription.SPNAME>>): R {
		return visitTerminal(node.getToken())
	}
	open fun visit_CAMELNAME(node: ASTNode.TerminalNode<Token.VariantToken.VariantInstanceToken<MetaDescription.CAMELNAME>>): R {
		return visitTerminal(node.getToken())
	}
	open fun visit_CAPSNAME(node: ASTNode.TerminalNode<Token.VariantToken.VariantInstanceToken<MetaDescription.CAPSNAME>>): R {
		return visitTerminal(node.getToken())
	}
	open fun visit_WHITESPACE(node: ASTNode.TerminalNode<Token.VariantToken.VariantInstanceToken<MetaDescription.WHITESPACE>>): R {
		return visitTerminal(node.getToken())
	}

    /**
    all -> m t g
    */
    abstract fun visit_all(node: ASTNode.InnerNode<MetaDescription.all>): R


    fun visit_m(node: ASTNode.InnerNode<MetaDescription.m>): R {
        return when (val id = node.getExpansion().getId()) {
			0 -> visit_m_0(node)
			1 -> visit_m_1(node)
            else -> throw IllegalStateException("Unexpected expansion id $id in expansion of m")
        }
    }

    /**
    m -> MACRO LPAREN kfPlus RPAREN
    */
    abstract fun visit_m_0(node: ASTNode.InnerNode<MetaDescription.m>): R

    /**
    m -> <eps>
    */
    abstract fun visit_m_1(node: ASTNode.InnerNode<MetaDescription.m>): R

    /**
    t -> TOKENS LPAREN tComp tFrag tPlus RPAREN
    */
    abstract fun visit_t(node: ASTNode.InnerNode<MetaDescription.t>): R


    /**
    g -> GRAMMAR LPAREN gComp gPlus RPAREN
    */
    abstract fun visit_g(node: ASTNode.InnerNode<MetaDescription.g>): R


    fun visit_kfPlus(node: ASTNode.InnerNode<MetaDescription.kfPlus>): R {
        return when (val id = node.getExpansion().getId()) {
			0 -> visit_kfPlus_0(node)
			1 -> visit_kfPlus_1(node)
            else -> throw IllegalStateException("Unexpected expansion id $id in expansion of kfPlus")
        }
    }

    /**
    kfPlus -> KOTLIN_FUNC kfPlus
    */
    abstract fun visit_kfPlus_0(node: ASTNode.InnerNode<MetaDescription.kfPlus>): R

    /**
    kfPlus -> <eps>
    */
    abstract fun visit_kfPlus_1(node: ASTNode.InnerNode<MetaDescription.kfPlus>): R

    fun visit_tComp(node: ASTNode.InnerNode<MetaDescription.tComp>): R {
        return when (val id = node.getExpansion().getId()) {
			0 -> visit_tComp_0(node)
			1 -> visit_tComp_1(node)
            else -> throw IllegalStateException("Unexpected expansion id $id in expansion of tComp")
        }
    }

    /**
    tComp -> COMPANION LPAREN tSkip RPAREN
    */
    abstract fun visit_tComp_0(node: ASTNode.InnerNode<MetaDescription.tComp>): R

    /**
    tComp -> <eps>
    */
    abstract fun visit_tComp_1(node: ASTNode.InnerNode<MetaDescription.tComp>): R

    fun visit_tFrag(node: ASTNode.InnerNode<MetaDescription.tFrag>): R {
        return when (val id = node.getExpansion().getId()) {
			0 -> visit_tFrag_0(node)
			1 -> visit_tFrag_1(node)
            else -> throw IllegalStateException("Unexpected expansion id $id in expansion of tFrag")
        }
    }

    /**
    tFrag -> FRAGMENTS LPAREN tFragPlus RPAREN
    */
    abstract fun visit_tFrag_0(node: ASTNode.InnerNode<MetaDescription.tFrag>): R

    /**
    tFrag -> <eps>
    */
    abstract fun visit_tFrag_1(node: ASTNode.InnerNode<MetaDescription.tFrag>): R

    fun visit_tPlus(node: ASTNode.InnerNode<MetaDescription.tPlus>): R {
        return when (val id = node.getExpansion().getId()) {
			0 -> visit_tPlus_0(node)
			1 -> visit_tPlus_1(node)
            else -> throw IllegalStateException("Unexpected expansion id $id in expansion of tPlus")
        }
    }

    /**
    tPlus -> tLine tPlus
    */
    abstract fun visit_tPlus_0(node: ASTNode.InnerNode<MetaDescription.tPlus>): R

    /**
    tPlus -> <eps>
    */
    abstract fun visit_tPlus_1(node: ASTNode.InnerNode<MetaDescription.tPlus>): R

    /**
    tSkip -> SKIP DESCRIBE tArray EOLN
    */
    abstract fun visit_tSkip(node: ASTNode.InnerNode<MetaDescription.tSkip>): R


    /**
    tArray -> LARRAY CAPSNAME tArrayPlus RARRAY
    */
    abstract fun visit_tArray(node: ASTNode.InnerNode<MetaDescription.tArray>): R


    fun visit_tArrayPlus(node: ASTNode.InnerNode<MetaDescription.tArrayPlus>): R {
        return when (val id = node.getExpansion().getId()) {
			0 -> visit_tArrayPlus_0(node)
			1 -> visit_tArrayPlus_1(node)
            else -> throw IllegalStateException("Unexpected expansion id $id in expansion of tArrayPlus")
        }
    }

    /**
    tArrayPlus -> SEP CAPSNAME tArrayPlus
    */
    abstract fun visit_tArrayPlus_0(node: ASTNode.InnerNode<MetaDescription.tArrayPlus>): R

    /**
    tArrayPlus -> <eps>
    */
    abstract fun visit_tArrayPlus_1(node: ASTNode.InnerNode<MetaDescription.tArrayPlus>): R

    fun visit_tFragPlus(node: ASTNode.InnerNode<MetaDescription.tFragPlus>): R {
        return when (val id = node.getExpansion().getId()) {
			0 -> visit_tFragPlus_0(node)
			1 -> visit_tFragPlus_1(node)
            else -> throw IllegalStateException("Unexpected expansion id $id in expansion of tFragPlus")
        }
    }

    /**
    tFragPlus -> tFragLine tFragPlus
    */
    abstract fun visit_tFragPlus_0(node: ASTNode.InnerNode<MetaDescription.tFragPlus>): R

    /**
    tFragPlus -> <eps>
    */
    abstract fun visit_tFragPlus_1(node: ASTNode.InnerNode<MetaDescription.tFragPlus>): R

    /**
    tFragLine -> CAPSNAME DESCRIBE STRING EOLN
    */
    abstract fun visit_tFragLine(node: ASTNode.InnerNode<MetaDescription.tFragLine>): R


    /**
    tLine -> CAPSNAME DESCRIBE tDef EOLN
    */
    abstract fun visit_tLine(node: ASTNode.InnerNode<MetaDescription.tLine>): R


    fun visit_tDef(node: ASTNode.InnerNode<MetaDescription.tDef>): R {
        return when (val id = node.getExpansion().getId()) {
			0 -> visit_tDef_0(node)
			1 -> visit_tDef_1(node)
			2 -> visit_tDef_2(node)
            else -> throw IllegalStateException("Unexpected expansion id $id in expansion of tDef")
        }
    }

    /**
    tDef -> STRING
    */
    abstract fun visit_tDef_0(node: ASTNode.InnerNode<MetaDescription.tDef>): R

    /**
    tDef -> RSTRING
    */
    abstract fun visit_tDef_1(node: ASTNode.InnerNode<MetaDescription.tDef>): R

    /**
    tDef -> LTRIG CHAR CHARRANGE CHAR RTRIG
    */
    abstract fun visit_tDef_2(node: ASTNode.InnerNode<MetaDescription.tDef>): R

    /**
    gComp -> COMPANION LPAREN gSynth gInh gCompv gStart RPAREN
    */
    abstract fun visit_gComp(node: ASTNode.InnerNode<MetaDescription.gComp>): R


    fun visit_gPlus(node: ASTNode.InnerNode<MetaDescription.gPlus>): R {
        return when (val id = node.getExpansion().getId()) {
			0 -> visit_gPlus_0(node)
			1 -> visit_gPlus_1(node)
            else -> throw IllegalStateException("Unexpected expansion id $id in expansion of gPlus")
        }
    }

    /**
    gPlus -> gLine gPlus
    */
    abstract fun visit_gPlus_0(node: ASTNode.InnerNode<MetaDescription.gPlus>): R

    /**
    gPlus -> <eps>
    */
    abstract fun visit_gPlus_1(node: ASTNode.InnerNode<MetaDescription.gPlus>): R

    fun visit_gSynth(node: ASTNode.InnerNode<MetaDescription.gSynth>): R {
        return when (val id = node.getExpansion().getId()) {
			0 -> visit_gSynth_0(node)
			1 -> visit_gSynth_1(node)
            else -> throw IllegalStateException("Unexpected expansion id $id in expansion of gSynth")
        }
    }

    /**
    gSynth -> SYNTHESIS LPAREN attribs RPAREN
    */
    abstract fun visit_gSynth_0(node: ASTNode.InnerNode<MetaDescription.gSynth>): R

    /**
    gSynth -> <eps>
    */
    abstract fun visit_gSynth_1(node: ASTNode.InnerNode<MetaDescription.gSynth>): R

    fun visit_gInh(node: ASTNode.InnerNode<MetaDescription.gInh>): R {
        return when (val id = node.getExpansion().getId()) {
			0 -> visit_gInh_0(node)
			1 -> visit_gInh_1(node)
            else -> throw IllegalStateException("Unexpected expansion id $id in expansion of gInh")
        }
    }

    /**
    gInh -> INHERITANCE LPAREN attribs RPAREN
    */
    abstract fun visit_gInh_0(node: ASTNode.InnerNode<MetaDescription.gInh>): R

    /**
    gInh -> <eps>
    */
    abstract fun visit_gInh_1(node: ASTNode.InnerNode<MetaDescription.gInh>): R

    fun visit_gCompv(node: ASTNode.InnerNode<MetaDescription.gCompv>): R {
        return when (val id = node.getExpansion().getId()) {
			0 -> visit_gCompv_0(node)
			1 -> visit_gCompv_1(node)
            else -> throw IllegalStateException("Unexpected expansion id $id in expansion of gCompv")
        }
    }

    /**
    gCompv -> COMPUTE LPAREN attribs RPAREN
    */
    abstract fun visit_gCompv_0(node: ASTNode.InnerNode<MetaDescription.gCompv>): R

    /**
    gCompv -> <eps>
    */
    abstract fun visit_gCompv_1(node: ASTNode.InnerNode<MetaDescription.gCompv>): R

    /**
    gStart -> START DESCRIBE CAMELNAME EOLN
    */
    abstract fun visit_gStart(node: ASTNode.InnerNode<MetaDescription.gStart>): R


    /**
    attribs -> attrib attribsPlus
    */
    abstract fun visit_attribs(node: ASTNode.InnerNode<MetaDescription.attribs>): R


    /**
    attrib -> CAMELNAME DESCRIBE type setDef EOLN
    */
    abstract fun visit_attrib(node: ASTNode.InnerNode<MetaDescription.attrib>): R


    fun visit_attribsPlus(node: ASTNode.InnerNode<MetaDescription.attribsPlus>): R {
        return when (val id = node.getExpansion().getId()) {
			0 -> visit_attribsPlus_0(node)
			1 -> visit_attribsPlus_1(node)
            else -> throw IllegalStateException("Unexpected expansion id $id in expansion of attribsPlus")
        }
    }

    /**
    attribsPlus -> attrib attribsPlus
    */
    abstract fun visit_attribsPlus_0(node: ASTNode.InnerNode<MetaDescription.attribsPlus>): R

    /**
    attribsPlus -> <eps>
    */
    abstract fun visit_attribsPlus_1(node: ASTNode.InnerNode<MetaDescription.attribsPlus>): R

    fun visit_type(node: ASTNode.InnerNode<MetaDescription.type>): R {
        return when (val id = node.getExpansion().getId()) {
			0 -> visit_type_0(node)
			1 -> visit_type_1(node)
			2 -> visit_type_2(node)
            else -> throw IllegalStateException("Unexpected expansion id $id in expansion of type")
        }
    }

    /**
    type -> INT_TYPE
    */
    abstract fun visit_type_0(node: ASTNode.InnerNode<MetaDescription.type>): R

    /**
    type -> DOUBLE_TYPE
    */
    abstract fun visit_type_1(node: ASTNode.InnerNode<MetaDescription.type>): R

    /**
    type -> STRING_TYPE
    */
    abstract fun visit_type_2(node: ASTNode.InnerNode<MetaDescription.type>): R

    fun visit_setDef(node: ASTNode.InnerNode<MetaDescription.setDef>): R {
        return when (val id = node.getExpansion().getId()) {
			0 -> visit_setDef_0(node)
			1 -> visit_setDef_1(node)
            else -> throw IllegalStateException("Unexpected expansion id $id in expansion of setDef")
        }
    }

    /**
    setDef -> DEFINE LPAREN DEFAULT ASSIGN defValue RPAREN
    */
    abstract fun visit_setDef_0(node: ASTNode.InnerNode<MetaDescription.setDef>): R

    /**
    setDef -> <eps>
    */
    abstract fun visit_setDef_1(node: ASTNode.InnerNode<MetaDescription.setDef>): R

    fun visit_defValue(node: ASTNode.InnerNode<MetaDescription.defValue>): R {
        return when (val id = node.getExpansion().getId()) {
			0 -> visit_defValue_0(node)
			1 -> visit_defValue_1(node)
			2 -> visit_defValue_2(node)
            else -> throw IllegalStateException("Unexpected expansion id $id in expansion of defValue")
        }
    }

    /**
    defValue -> STRING
    */
    abstract fun visit_defValue_0(node: ASTNode.InnerNode<MetaDescription.defValue>): R

    /**
    defValue -> defTerm defMod
    */
    abstract fun visit_defValue_1(node: ASTNode.InnerNode<MetaDescription.defValue>): R

    /**
    defValue -> SUB defTerm
    */
    abstract fun visit_defValue_2(node: ASTNode.InnerNode<MetaDescription.defValue>): R

    /**
    gLine -> CAMELNAME def DESCRIBE rules EOLN
    */
    abstract fun visit_gLine(node: ASTNode.InnerNode<MetaDescription.gLine>): R


    fun visit_def(node: ASTNode.InnerNode<MetaDescription.def>): R {
        return when (val id = node.getExpansion().getId()) {
			0 -> visit_def_0(node)
			1 -> visit_def_1(node)
            else -> throw IllegalStateException("Unexpected expansion id $id in expansion of def")
        }
    }

    /**
    def -> DEFINE LPAREN defBody RPAREN
    */
    abstract fun visit_def_0(node: ASTNode.InnerNode<MetaDescription.def>): R

    /**
    def -> <eps>
    */
    abstract fun visit_def_1(node: ASTNode.InnerNode<MetaDescription.def>): R

    /**
    rules -> rule rulesPlus
    */
    abstract fun visit_rules(node: ASTNode.InnerNode<MetaDescription.rules>): R


    /**
    rule -> seq def
    */
    abstract fun visit_rule(node: ASTNode.InnerNode<MetaDescription.rule>): R


    fun visit_rulesPlus(node: ASTNode.InnerNode<MetaDescription.rulesPlus>): R {
        return when (val id = node.getExpansion().getId()) {
			0 -> visit_rulesPlus_0(node)
			1 -> visit_rulesPlus_1(node)
            else -> throw IllegalStateException("Unexpected expansion id $id in expansion of rulesPlus")
        }
    }

    /**
    rulesPlus -> CHOICE rule rulesPlus
    */
    abstract fun visit_rulesPlus_0(node: ASTNode.InnerNode<MetaDescription.rulesPlus>): R

    /**
    rulesPlus -> <eps>
    */
    abstract fun visit_rulesPlus_1(node: ASTNode.InnerNode<MetaDescription.rulesPlus>): R

    /**
    seq -> atom seqPlus
    */
    abstract fun visit_seq(node: ASTNode.InnerNode<MetaDescription.seq>): R


    fun visit_atom(node: ASTNode.InnerNode<MetaDescription.atom>): R {
        return when (val id = node.getExpansion().getId()) {
			0 -> visit_atom_0(node)
			1 -> visit_atom_1(node)
            else -> throw IllegalStateException("Unexpected expansion id $id in expansion of atom")
        }
    }

    /**
    atom -> CAPSNAME
    */
    abstract fun visit_atom_0(node: ASTNode.InnerNode<MetaDescription.atom>): R

    /**
    atom -> CAMELNAME pass
    */
    abstract fun visit_atom_1(node: ASTNode.InnerNode<MetaDescription.atom>): R

    fun visit_seqPlus(node: ASTNode.InnerNode<MetaDescription.seqPlus>): R {
        return when (val id = node.getExpansion().getId()) {
			0 -> visit_seqPlus_0(node)
			1 -> visit_seqPlus_1(node)
            else -> throw IllegalStateException("Unexpected expansion id $id in expansion of seqPlus")
        }
    }

    /**
    seqPlus -> atom seqPlus
    */
    abstract fun visit_seqPlus_0(node: ASTNode.InnerNode<MetaDescription.seqPlus>): R

    /**
    seqPlus -> <eps>
    */
    abstract fun visit_seqPlus_1(node: ASTNode.InnerNode<MetaDescription.seqPlus>): R

    fun visit_pass(node: ASTNode.InnerNode<MetaDescription.pass>): R {
        return when (val id = node.getExpansion().getId()) {
			0 -> visit_pass_0(node)
			1 -> visit_pass_1(node)
            else -> throw IllegalStateException("Unexpected expansion id $id in expansion of pass")
        }
    }

    /**
    pass -> LPAREN defBody RPAREN
    */
    abstract fun visit_pass_0(node: ASTNode.InnerNode<MetaDescription.pass>): R

    /**
    pass -> <eps>
    */
    abstract fun visit_pass_1(node: ASTNode.InnerNode<MetaDescription.pass>): R

    /**
    defBody -> defAtom defPlus
    */
    abstract fun visit_defBody(node: ASTNode.InnerNode<MetaDescription.defBody>): R


    /**
    defAtom -> CAMELNAME ASSIGN defValue
    */
    abstract fun visit_defAtom(node: ASTNode.InnerNode<MetaDescription.defAtom>): R


    fun visit_defPlus(node: ASTNode.InnerNode<MetaDescription.defPlus>): R {
        return when (val id = node.getExpansion().getId()) {
			0 -> visit_defPlus_0(node)
			1 -> visit_defPlus_1(node)
            else -> throw IllegalStateException("Unexpected expansion id $id in expansion of defPlus")
        }
    }

    /**
    defPlus -> SEP defAtom defPlus
    */
    abstract fun visit_defPlus_0(node: ASTNode.InnerNode<MetaDescription.defPlus>): R

    /**
    defPlus -> <eps>
    */
    abstract fun visit_defPlus_1(node: ASTNode.InnerNode<MetaDescription.defPlus>): R

    fun visit_defTerm(node: ASTNode.InnerNode<MetaDescription.defTerm>): R {
        return when (val id = node.getExpansion().getId()) {
			0 -> visit_defTerm_0(node)
			1 -> visit_defTerm_1(node)
			2 -> visit_defTerm_2(node)
            else -> throw IllegalStateException("Unexpected expansion id $id in expansion of defTerm")
        }
    }

    /**
    defTerm -> atName
    */
    abstract fun visit_defTerm_0(node: ASTNode.InnerNode<MetaDescription.defTerm>): R

    /**
    defTerm -> INT
    */
    abstract fun visit_defTerm_1(node: ASTNode.InnerNode<MetaDescription.defTerm>): R

    /**
    defTerm -> DOUBLE
    */
    abstract fun visit_defTerm_2(node: ASTNode.InnerNode<MetaDescription.defTerm>): R

    fun visit_defMod(node: ASTNode.InnerNode<MetaDescription.defMod>): R {
        return when (val id = node.getExpansion().getId()) {
			0 -> visit_defMod_0(node)
			1 -> visit_defMod_1(node)
            else -> throw IllegalStateException("Unexpected expansion id $id in expansion of defMod")
        }
    }

    /**
    defMod -> op defTerm
    */
    abstract fun visit_defMod_0(node: ASTNode.InnerNode<MetaDescription.defMod>): R

    /**
    defMod -> <eps>
    */
    abstract fun visit_defMod_1(node: ASTNode.InnerNode<MetaDescription.defMod>): R

    fun visit_atName(node: ASTNode.InnerNode<MetaDescription.atName>): R {
        return when (val id = node.getExpansion().getId()) {
			0 -> visit_atName_0(node)
			1 -> visit_atName_1(node)
            else -> throw IllegalStateException("Unexpected expansion id $id in expansion of atName")
        }
    }

    /**
    atName -> SPNAME
    */
    abstract fun visit_atName_0(node: ASTNode.InnerNode<MetaDescription.atName>): R

    /**
    atName -> CAMELNAME
    */
    abstract fun visit_atName_1(node: ASTNode.InnerNode<MetaDescription.atName>): R

    fun visit_op(node: ASTNode.InnerNode<MetaDescription.op>): R {
        return when (val id = node.getExpansion().getId()) {
			0 -> visit_op_0(node)
			1 -> visit_op_1(node)
			2 -> visit_op_2(node)
			3 -> visit_op_3(node)
            else -> throw IllegalStateException("Unexpected expansion id $id in expansion of op")
        }
    }

    /**
    op -> ADD
    */
    abstract fun visit_op_0(node: ASTNode.InnerNode<MetaDescription.op>): R

    /**
    op -> SUB
    */
    abstract fun visit_op_1(node: ASTNode.InnerNode<MetaDescription.op>): R

    /**
    op -> MUL
    */
    abstract fun visit_op_2(node: ASTNode.InnerNode<MetaDescription.op>): R

    /**
    op -> DIV
    */
    abstract fun visit_op_3(node: ASTNode.InnerNode<MetaDescription.op>): R
}
