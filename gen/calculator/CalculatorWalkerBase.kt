/**
This code is generated by [translate.codegen.WalkerBuilder]
basing on grammar description [calculator.CalculatorGrammarInfo] derived from [translate.codegen.helpers.GrammarInfo]
*/

package calculator

import grammar.token.Token
import grammar.Grammar
import grammar.Expansion

import structure.ASTNode
import structure.Walker

import translate.codegen.helpers.BuilderHelper
import translate.meta.helpers.MetaGrammarInfo

@Suppress("UNCHECKED_CAST")
interface CalculatorWalkerBase<R> : Walker<R> {

/*
Start: expression
expression -> term expression
expressionPlus -> PLUS term expressionPlus | MINUS term expressionPlus | <eps>
term -> factor termPlus
termPlus -> TIMES factor termPlus | DIV factor termPlus | <eps>
factor -> MINUS factor | atom
atom -> LPAREN expression RPAREN | UINT
*/

    fun <T : Token> visitTerminal(token: T): R

    override fun visit(node: ASTNode<out Token>): R {
        return when(node.getToken()) {
            CalculatorGrammarInfo.WHITESPACE -> visit_WHITESPACE(node as ASTNode.TerminalNode<Token.VariantToken.VariantInstanceToken<CalculatorGrammarInfo.WHITESPACE>>)
            CalculatorGrammarInfo.LPAREN -> visit_LPAREN(node as ASTNode.TerminalNode<CalculatorGrammarInfo.LPAREN>)
            CalculatorGrammarInfo.RPAREN -> visit_RPAREN(node as ASTNode.TerminalNode<CalculatorGrammarInfo.RPAREN>)
            CalculatorGrammarInfo.PLUS -> visit_PLUS(node as ASTNode.TerminalNode<CalculatorGrammarInfo.PLUS>)
            CalculatorGrammarInfo.MINUS -> visit_MINUS(node as ASTNode.TerminalNode<CalculatorGrammarInfo.MINUS>)
            CalculatorGrammarInfo.TIMES -> visit_TIMES(node as ASTNode.TerminalNode<CalculatorGrammarInfo.TIMES>)
            CalculatorGrammarInfo.DIV -> visit_DIV(node as ASTNode.TerminalNode<CalculatorGrammarInfo.DIV>)
            CalculatorGrammarInfo.UINT -> visit_UINT(node as ASTNode.TerminalNode<Token.VariantToken.VariantInstanceToken<CalculatorGrammarInfo.UINT>>)
            CalculatorGrammarInfo.expression -> visit_expression(node as ASTNode.InnerNode<CalculatorGrammarInfo.expression>)
            CalculatorGrammarInfo.expressionPlus -> visit_expressionPlus(node as ASTNode.InnerNode<CalculatorGrammarInfo.expressionPlus>)
            CalculatorGrammarInfo.term -> visit_term(node as ASTNode.InnerNode<CalculatorGrammarInfo.term>)
            CalculatorGrammarInfo.termPlus -> visit_termPlus(node as ASTNode.InnerNode<CalculatorGrammarInfo.termPlus>)
            CalculatorGrammarInfo.factor -> visit_factor(node as ASTNode.InnerNode<CalculatorGrammarInfo.factor>)
            CalculatorGrammarInfo.atom -> visit_atom(node as ASTNode.InnerNode<CalculatorGrammarInfo.atom>)
            else -> throw IllegalStateException("Unknown token ${node.getToken()} met")
        }
    }

    fun visit_WHITESPACE(node: ASTNode.TerminalNode<Token.VariantToken.VariantInstanceToken<CalculatorGrammarInfo.WHITESPACE>>): R {
        return visitTerminal(node.getToken())
    }

    fun visit_LPAREN(node: ASTNode.TerminalNode<CalculatorGrammarInfo.LPAREN>): R {
        return visitTerminal(node.getToken())
    }

    fun visit_RPAREN(node: ASTNode.TerminalNode<CalculatorGrammarInfo.RPAREN>): R {
        return visitTerminal(node.getToken())
    }

    fun visit_PLUS(node: ASTNode.TerminalNode<CalculatorGrammarInfo.PLUS>): R {
        return visitTerminal(node.getToken())
    }

    fun visit_MINUS(node: ASTNode.TerminalNode<CalculatorGrammarInfo.MINUS>): R {
        return visitTerminal(node.getToken())
    }

    fun visit_TIMES(node: ASTNode.TerminalNode<CalculatorGrammarInfo.TIMES>): R {
        return visitTerminal(node.getToken())
    }

    fun visit_DIV(node: ASTNode.TerminalNode<CalculatorGrammarInfo.DIV>): R {
        return visitTerminal(node.getToken())
    }

    fun visit_UINT(node: ASTNode.TerminalNode<Token.VariantToken.VariantInstanceToken<CalculatorGrammarInfo.UINT>>): R {
        return visitTerminal(node.getToken())
    }

    /**
    expression -> term expression
    */
    fun visit_expression(node: ASTNode.InnerNode<CalculatorGrammarInfo.expression>): R {
        throw IllegalStateException("Unexpected expansion ${node.getToken()} -> ${node.getExpansion()} visited while traversing tree")
    }

    fun visit_expressionPlus(node: ASTNode.InnerNode<CalculatorGrammarInfo.expressionPlus>): R {
        return when (val id = node.getExpansion().getId()) {
            0 -> visit_expressionPlus_0(node)
            1 -> visit_expressionPlus_1(node)
            2 -> visit_expressionPlus_2(node)
            else -> throw IllegalStateException("Unexpected expansion id $id in expansion of expressionPlus")
        }
    }

    /**
    expressionPlus -> PLUS term expressionPlus
    */
    fun visit_expressionPlus_0(node: ASTNode.InnerNode<CalculatorGrammarInfo.expressionPlus>): R {
        throw IllegalStateException("Unexpected expansion ${node.getToken()} -> ${node.getExpansion()} visited while traversing tree") 
    }

    /**
    expressionPlus -> MINUS term expressionPlus
    */
    fun visit_expressionPlus_1(node: ASTNode.InnerNode<CalculatorGrammarInfo.expressionPlus>): R {
        throw IllegalStateException("Unexpected expansion ${node.getToken()} -> ${node.getExpansion()} visited while traversing tree") 
    }

    /**
    expressionPlus -> <eps>
    */
    fun visit_expressionPlus_2(node: ASTNode.InnerNode<CalculatorGrammarInfo.expressionPlus>): R {
        throw IllegalStateException("Unexpected expansion ${node.getToken()} -> ${node.getExpansion()} visited while traversing tree") 
    }

    /**
    term -> factor termPlus
    */
    fun visit_term(node: ASTNode.InnerNode<CalculatorGrammarInfo.term>): R {
        throw IllegalStateException("Unexpected expansion ${node.getToken()} -> ${node.getExpansion()} visited while traversing tree")
    }

    fun visit_termPlus(node: ASTNode.InnerNode<CalculatorGrammarInfo.termPlus>): R {
        return when (val id = node.getExpansion().getId()) {
            0 -> visit_termPlus_0(node)
            1 -> visit_termPlus_1(node)
            2 -> visit_termPlus_2(node)
            else -> throw IllegalStateException("Unexpected expansion id $id in expansion of termPlus")
        }
    }

    /**
    termPlus -> TIMES factor termPlus
    */
    fun visit_termPlus_0(node: ASTNode.InnerNode<CalculatorGrammarInfo.termPlus>): R {
        throw IllegalStateException("Unexpected expansion ${node.getToken()} -> ${node.getExpansion()} visited while traversing tree") 
    }

    /**
    termPlus -> DIV factor termPlus
    */
    fun visit_termPlus_1(node: ASTNode.InnerNode<CalculatorGrammarInfo.termPlus>): R {
        throw IllegalStateException("Unexpected expansion ${node.getToken()} -> ${node.getExpansion()} visited while traversing tree") 
    }

    /**
    termPlus -> <eps>
    */
    fun visit_termPlus_2(node: ASTNode.InnerNode<CalculatorGrammarInfo.termPlus>): R {
        throw IllegalStateException("Unexpected expansion ${node.getToken()} -> ${node.getExpansion()} visited while traversing tree") 
    }

    fun visit_factor(node: ASTNode.InnerNode<CalculatorGrammarInfo.factor>): R {
        return when (val id = node.getExpansion().getId()) {
            0 -> visit_factor_0(node)
            1 -> visit_factor_1(node)
            else -> throw IllegalStateException("Unexpected expansion id $id in expansion of factor")
        }
    }

    /**
    factor -> MINUS factor
    */
    fun visit_factor_0(node: ASTNode.InnerNode<CalculatorGrammarInfo.factor>): R {
        throw IllegalStateException("Unexpected expansion ${node.getToken()} -> ${node.getExpansion()} visited while traversing tree") 
    }

    /**
    factor -> atom
    */
    fun visit_factor_1(node: ASTNode.InnerNode<CalculatorGrammarInfo.factor>): R {
        throw IllegalStateException("Unexpected expansion ${node.getToken()} -> ${node.getExpansion()} visited while traversing tree") 
    }

    fun visit_atom(node: ASTNode.InnerNode<CalculatorGrammarInfo.atom>): R {
        return when (val id = node.getExpansion().getId()) {
            0 -> visit_atom_0(node)
            1 -> visit_atom_1(node)
            else -> throw IllegalStateException("Unexpected expansion id $id in expansion of atom")
        }
    }

    /**
    atom -> LPAREN expression RPAREN
    */
    fun visit_atom_0(node: ASTNode.InnerNode<CalculatorGrammarInfo.atom>): R {
        throw IllegalStateException("Unexpected expansion ${node.getToken()} -> ${node.getExpansion()} visited while traversing tree") 
    }

    /**
    atom -> UINT
    */
    fun visit_atom_1(node: ASTNode.InnerNode<CalculatorGrammarInfo.atom>): R {
        throw IllegalStateException("Unexpected expansion ${node.getToken()} -> ${node.getExpansion()} visited while traversing tree") 
    }

}