/**
This code is generated by [translate.codegen.WalkerBuilder]
basing on grammar description [prefix.PrefixGrammarInfo] derived from [translate.codegen.helpers.GrammarInfo]
*/

package prefix

import grammar.token.Token
import grammar.Grammar
import grammar.Expansion

import structure.ASTNode
import structure.Walker

import translate.codegen.helpers.BuilderHelper
import translate.meta.helpers.MetaGrammarInfo

@Suppress("UNCHECKED_CAST")
interface PrefixWalkerBase<R> : Walker<R> {

/*
Start: main
main -> code
code -> codeBlock code | <eps>
codeBlock -> statement | ifBlock | forBlock | PASS
statement -> print | assignment
print -> PRINTW expression
assignment -> ASSIGN VAR expression
ifBlock -> IFW logicalExpression innerBody innerBody
forBlock -> FORW VAR arithmeticAtom arithmeticAtom innerBody
innerBody -> codeBlock | BOTH codeBlock innerBody
expression -> logicalExpression | arithmeticExpression
logicalBinop -> AND | OR | XOR
logicalUnop -> NOT
logicalExpression -> logicalBinop logicalExpression logicalExpression | logicalUnop logicalExpression | logicalAtom
logicalAtom -> VAR | comparison
relation -> EQ | NE | GT | GE | LT | LE
comparison -> relation arithmeticExpression arithmeticExpression
arithmeticBinop -> PLUS | MINUS | TIMES | DIV
arithmeticExpression -> arithmeticBinop arithmeticExpression arithmeticExpression | arithmeticAtom
arithmeticAtom -> VAR | UINT
*/

    fun <T : Token> visitTerminal(token: T): R

    override fun visit(node: ASTNode<out Token>): R {
        return when(node.getToken()) {
            PrefixGrammarInfo.WHITESPACE -> visit_WHITESPACE(node as ASTNode.TerminalNode<Token.VariantToken.VariantInstanceToken<PrefixGrammarInfo.WHITESPACE>>)
            PrefixGrammarInfo.IFW -> visit_IFW(node as ASTNode.TerminalNode<PrefixGrammarInfo.IFW>)
            PrefixGrammarInfo.FORW -> visit_FORW(node as ASTNode.TerminalNode<PrefixGrammarInfo.FORW>)
            PrefixGrammarInfo.PASS -> visit_PASS(node as ASTNode.TerminalNode<PrefixGrammarInfo.PASS>)
            PrefixGrammarInfo.BOTH -> visit_BOTH(node as ASTNode.TerminalNode<PrefixGrammarInfo.BOTH>)
            PrefixGrammarInfo.PRINTW -> visit_PRINTW(node as ASTNode.TerminalNode<PrefixGrammarInfo.PRINTW>)
            PrefixGrammarInfo.PLUS -> visit_PLUS(node as ASTNode.TerminalNode<PrefixGrammarInfo.PLUS>)
            PrefixGrammarInfo.MINUS -> visit_MINUS(node as ASTNode.TerminalNode<PrefixGrammarInfo.MINUS>)
            PrefixGrammarInfo.TIMES -> visit_TIMES(node as ASTNode.TerminalNode<PrefixGrammarInfo.TIMES>)
            PrefixGrammarInfo.DIV -> visit_DIV(node as ASTNode.TerminalNode<PrefixGrammarInfo.DIV>)
            PrefixGrammarInfo.NOT -> visit_NOT(node as ASTNode.TerminalNode<PrefixGrammarInfo.NOT>)
            PrefixGrammarInfo.XOR -> visit_XOR(node as ASTNode.TerminalNode<PrefixGrammarInfo.XOR>)
            PrefixGrammarInfo.AND -> visit_AND(node as ASTNode.TerminalNode<PrefixGrammarInfo.AND>)
            PrefixGrammarInfo.OR -> visit_OR(node as ASTNode.TerminalNode<PrefixGrammarInfo.OR>)
            PrefixGrammarInfo.GE -> visit_GE(node as ASTNode.TerminalNode<PrefixGrammarInfo.GE>)
            PrefixGrammarInfo.GT -> visit_GT(node as ASTNode.TerminalNode<PrefixGrammarInfo.GT>)
            PrefixGrammarInfo.LE -> visit_LE(node as ASTNode.TerminalNode<PrefixGrammarInfo.LE>)
            PrefixGrammarInfo.LT -> visit_LT(node as ASTNode.TerminalNode<PrefixGrammarInfo.LT>)
            PrefixGrammarInfo.EQ -> visit_EQ(node as ASTNode.TerminalNode<PrefixGrammarInfo.EQ>)
            PrefixGrammarInfo.NE -> visit_NE(node as ASTNode.TerminalNode<PrefixGrammarInfo.NE>)
            PrefixGrammarInfo.ASSIGN -> visit_ASSIGN(node as ASTNode.TerminalNode<PrefixGrammarInfo.ASSIGN>)
            PrefixGrammarInfo.VAR -> visit_VAR(node as ASTNode.TerminalNode<Token.VariantToken.VariantInstanceToken<PrefixGrammarInfo.VAR>>)
            PrefixGrammarInfo.UINT -> visit_UINT(node as ASTNode.TerminalNode<Token.VariantToken.VariantInstanceToken<PrefixGrammarInfo.UINT>>)
            PrefixGrammarInfo.main -> visit_main(node as ASTNode.InnerNode<PrefixGrammarInfo.main>)
            PrefixGrammarInfo.code -> visit_code(node as ASTNode.InnerNode<PrefixGrammarInfo.code>)
            PrefixGrammarInfo.codeBlock -> visit_codeBlock(node as ASTNode.InnerNode<PrefixGrammarInfo.codeBlock>)
            PrefixGrammarInfo.statement -> visit_statement(node as ASTNode.InnerNode<PrefixGrammarInfo.statement>)
            PrefixGrammarInfo.print -> visit_print(node as ASTNode.InnerNode<PrefixGrammarInfo.print>)
            PrefixGrammarInfo.assignment -> visit_assignment(node as ASTNode.InnerNode<PrefixGrammarInfo.assignment>)
            PrefixGrammarInfo.ifBlock -> visit_ifBlock(node as ASTNode.InnerNode<PrefixGrammarInfo.ifBlock>)
            PrefixGrammarInfo.forBlock -> visit_forBlock(node as ASTNode.InnerNode<PrefixGrammarInfo.forBlock>)
            PrefixGrammarInfo.innerBody -> visit_innerBody(node as ASTNode.InnerNode<PrefixGrammarInfo.innerBody>)
            PrefixGrammarInfo.expression -> visit_expression(node as ASTNode.InnerNode<PrefixGrammarInfo.expression>)
            PrefixGrammarInfo.logicalBinop -> visit_logicalBinop(node as ASTNode.InnerNode<PrefixGrammarInfo.logicalBinop>)
            PrefixGrammarInfo.logicalUnop -> visit_logicalUnop(node as ASTNode.InnerNode<PrefixGrammarInfo.logicalUnop>)
            PrefixGrammarInfo.logicalExpression -> visit_logicalExpression(node as ASTNode.InnerNode<PrefixGrammarInfo.logicalExpression>)
            PrefixGrammarInfo.logicalAtom -> visit_logicalAtom(node as ASTNode.InnerNode<PrefixGrammarInfo.logicalAtom>)
            PrefixGrammarInfo.relation -> visit_relation(node as ASTNode.InnerNode<PrefixGrammarInfo.relation>)
            PrefixGrammarInfo.comparison -> visit_comparison(node as ASTNode.InnerNode<PrefixGrammarInfo.comparison>)
            PrefixGrammarInfo.arithmeticBinop -> visit_arithmeticBinop(node as ASTNode.InnerNode<PrefixGrammarInfo.arithmeticBinop>)
            PrefixGrammarInfo.arithmeticExpression -> visit_arithmeticExpression(node as ASTNode.InnerNode<PrefixGrammarInfo.arithmeticExpression>)
            PrefixGrammarInfo.arithmeticAtom -> visit_arithmeticAtom(node as ASTNode.InnerNode<PrefixGrammarInfo.arithmeticAtom>)
            else -> throw IllegalStateException("Unknown token ${node.getToken()} met")
        }
    }

    fun visit_WHITESPACE(node: ASTNode.TerminalNode<Token.VariantToken.VariantInstanceToken<PrefixGrammarInfo.WHITESPACE>>): R {
        return visitTerminal(node.getToken())
    }

    fun visit_IFW(node: ASTNode.TerminalNode<PrefixGrammarInfo.IFW>): R {
        return visitTerminal(node.getToken())
    }

    fun visit_FORW(node: ASTNode.TerminalNode<PrefixGrammarInfo.FORW>): R {
        return visitTerminal(node.getToken())
    }

    fun visit_PASS(node: ASTNode.TerminalNode<PrefixGrammarInfo.PASS>): R {
        return visitTerminal(node.getToken())
    }

    fun visit_BOTH(node: ASTNode.TerminalNode<PrefixGrammarInfo.BOTH>): R {
        return visitTerminal(node.getToken())
    }

    fun visit_PRINTW(node: ASTNode.TerminalNode<PrefixGrammarInfo.PRINTW>): R {
        return visitTerminal(node.getToken())
    }

    fun visit_PLUS(node: ASTNode.TerminalNode<PrefixGrammarInfo.PLUS>): R {
        return visitTerminal(node.getToken())
    }

    fun visit_MINUS(node: ASTNode.TerminalNode<PrefixGrammarInfo.MINUS>): R {
        return visitTerminal(node.getToken())
    }

    fun visit_TIMES(node: ASTNode.TerminalNode<PrefixGrammarInfo.TIMES>): R {
        return visitTerminal(node.getToken())
    }

    fun visit_DIV(node: ASTNode.TerminalNode<PrefixGrammarInfo.DIV>): R {
        return visitTerminal(node.getToken())
    }

    fun visit_NOT(node: ASTNode.TerminalNode<PrefixGrammarInfo.NOT>): R {
        return visitTerminal(node.getToken())
    }

    fun visit_XOR(node: ASTNode.TerminalNode<PrefixGrammarInfo.XOR>): R {
        return visitTerminal(node.getToken())
    }

    fun visit_AND(node: ASTNode.TerminalNode<PrefixGrammarInfo.AND>): R {
        return visitTerminal(node.getToken())
    }

    fun visit_OR(node: ASTNode.TerminalNode<PrefixGrammarInfo.OR>): R {
        return visitTerminal(node.getToken())
    }

    fun visit_GE(node: ASTNode.TerminalNode<PrefixGrammarInfo.GE>): R {
        return visitTerminal(node.getToken())
    }

    fun visit_GT(node: ASTNode.TerminalNode<PrefixGrammarInfo.GT>): R {
        return visitTerminal(node.getToken())
    }

    fun visit_LE(node: ASTNode.TerminalNode<PrefixGrammarInfo.LE>): R {
        return visitTerminal(node.getToken())
    }

    fun visit_LT(node: ASTNode.TerminalNode<PrefixGrammarInfo.LT>): R {
        return visitTerminal(node.getToken())
    }

    fun visit_EQ(node: ASTNode.TerminalNode<PrefixGrammarInfo.EQ>): R {
        return visitTerminal(node.getToken())
    }

    fun visit_NE(node: ASTNode.TerminalNode<PrefixGrammarInfo.NE>): R {
        return visitTerminal(node.getToken())
    }

    fun visit_ASSIGN(node: ASTNode.TerminalNode<PrefixGrammarInfo.ASSIGN>): R {
        return visitTerminal(node.getToken())
    }

    fun visit_VAR(node: ASTNode.TerminalNode<Token.VariantToken.VariantInstanceToken<PrefixGrammarInfo.VAR>>): R {
        return visitTerminal(node.getToken())
    }

    fun visit_UINT(node: ASTNode.TerminalNode<Token.VariantToken.VariantInstanceToken<PrefixGrammarInfo.UINT>>): R {
        return visitTerminal(node.getToken())
    }

    /**
    main -> code
    */
    fun visit_main(node: ASTNode.InnerNode<PrefixGrammarInfo.main>): R {
        throw IllegalStateException("Unexpected expansion ${node.getToken()} -> ${node.getExpansion()} visited while traversing tree")
    }

    fun visit_code(node: ASTNode.InnerNode<PrefixGrammarInfo.code>): R {
        return when (val id = node.getExpansion().getId()) {
            0 -> visit_code_0(node)
            1 -> visit_code_1(node)
            else -> throw IllegalStateException("Unexpected expansion id $id in expansion of code")
        }
    }

    /**
    code -> codeBlock code
    */
    fun visit_code_0(node: ASTNode.InnerNode<PrefixGrammarInfo.code>): R {
        throw IllegalStateException("Unexpected expansion ${node.getToken()} -> ${node.getExpansion()} visited while traversing tree") 
    }

    /**
    code -> <eps>
    */
    fun visit_code_1(node: ASTNode.InnerNode<PrefixGrammarInfo.code>): R {
        throw IllegalStateException("Unexpected expansion ${node.getToken()} -> ${node.getExpansion()} visited while traversing tree") 
    }

    fun visit_codeBlock(node: ASTNode.InnerNode<PrefixGrammarInfo.codeBlock>): R {
        return when (val id = node.getExpansion().getId()) {
            0 -> visit_codeBlock_0(node)
            1 -> visit_codeBlock_1(node)
            2 -> visit_codeBlock_2(node)
            3 -> visit_codeBlock_3(node)
            else -> throw IllegalStateException("Unexpected expansion id $id in expansion of codeBlock")
        }
    }

    /**
    codeBlock -> statement
    */
    fun visit_codeBlock_0(node: ASTNode.InnerNode<PrefixGrammarInfo.codeBlock>): R {
        throw IllegalStateException("Unexpected expansion ${node.getToken()} -> ${node.getExpansion()} visited while traversing tree") 
    }

    /**
    codeBlock -> ifBlock
    */
    fun visit_codeBlock_1(node: ASTNode.InnerNode<PrefixGrammarInfo.codeBlock>): R {
        throw IllegalStateException("Unexpected expansion ${node.getToken()} -> ${node.getExpansion()} visited while traversing tree") 
    }

    /**
    codeBlock -> forBlock
    */
    fun visit_codeBlock_2(node: ASTNode.InnerNode<PrefixGrammarInfo.codeBlock>): R {
        throw IllegalStateException("Unexpected expansion ${node.getToken()} -> ${node.getExpansion()} visited while traversing tree") 
    }

    /**
    codeBlock -> PASS
    */
    fun visit_codeBlock_3(node: ASTNode.InnerNode<PrefixGrammarInfo.codeBlock>): R {
        throw IllegalStateException("Unexpected expansion ${node.getToken()} -> ${node.getExpansion()} visited while traversing tree") 
    }

    fun visit_statement(node: ASTNode.InnerNode<PrefixGrammarInfo.statement>): R {
        return when (val id = node.getExpansion().getId()) {
            0 -> visit_statement_0(node)
            1 -> visit_statement_1(node)
            else -> throw IllegalStateException("Unexpected expansion id $id in expansion of statement")
        }
    }

    /**
    statement -> print
    */
    fun visit_statement_0(node: ASTNode.InnerNode<PrefixGrammarInfo.statement>): R {
        throw IllegalStateException("Unexpected expansion ${node.getToken()} -> ${node.getExpansion()} visited while traversing tree") 
    }

    /**
    statement -> assignment
    */
    fun visit_statement_1(node: ASTNode.InnerNode<PrefixGrammarInfo.statement>): R {
        throw IllegalStateException("Unexpected expansion ${node.getToken()} -> ${node.getExpansion()} visited while traversing tree") 
    }

    /**
    print -> PRINTW expression
    */
    fun visit_print(node: ASTNode.InnerNode<PrefixGrammarInfo.print>): R {
        throw IllegalStateException("Unexpected expansion ${node.getToken()} -> ${node.getExpansion()} visited while traversing tree")
    }

    /**
    assignment -> ASSIGN VAR expression
    */
    fun visit_assignment(node: ASTNode.InnerNode<PrefixGrammarInfo.assignment>): R {
        throw IllegalStateException("Unexpected expansion ${node.getToken()} -> ${node.getExpansion()} visited while traversing tree")
    }

    /**
    ifBlock -> IFW logicalExpression innerBody innerBody
    */
    fun visit_ifBlock(node: ASTNode.InnerNode<PrefixGrammarInfo.ifBlock>): R {
        throw IllegalStateException("Unexpected expansion ${node.getToken()} -> ${node.getExpansion()} visited while traversing tree")
    }

    /**
    forBlock -> FORW VAR arithmeticAtom arithmeticAtom innerBody
    */
    fun visit_forBlock(node: ASTNode.InnerNode<PrefixGrammarInfo.forBlock>): R {
        throw IllegalStateException("Unexpected expansion ${node.getToken()} -> ${node.getExpansion()} visited while traversing tree")
    }

    fun visit_innerBody(node: ASTNode.InnerNode<PrefixGrammarInfo.innerBody>): R {
        return when (val id = node.getExpansion().getId()) {
            0 -> visit_innerBody_0(node)
            1 -> visit_innerBody_1(node)
            else -> throw IllegalStateException("Unexpected expansion id $id in expansion of innerBody")
        }
    }

    /**
    innerBody -> codeBlock
    */
    fun visit_innerBody_0(node: ASTNode.InnerNode<PrefixGrammarInfo.innerBody>): R {
        throw IllegalStateException("Unexpected expansion ${node.getToken()} -> ${node.getExpansion()} visited while traversing tree") 
    }

    /**
    innerBody -> BOTH codeBlock innerBody
    */
    fun visit_innerBody_1(node: ASTNode.InnerNode<PrefixGrammarInfo.innerBody>): R {
        throw IllegalStateException("Unexpected expansion ${node.getToken()} -> ${node.getExpansion()} visited while traversing tree") 
    }

    fun visit_expression(node: ASTNode.InnerNode<PrefixGrammarInfo.expression>): R {
        return when (val id = node.getExpansion().getId()) {
            0 -> visit_expression_0(node)
            1 -> visit_expression_1(node)
            else -> throw IllegalStateException("Unexpected expansion id $id in expansion of expression")
        }
    }

    /**
    expression -> logicalExpression
    */
    fun visit_expression_0(node: ASTNode.InnerNode<PrefixGrammarInfo.expression>): R {
        throw IllegalStateException("Unexpected expansion ${node.getToken()} -> ${node.getExpansion()} visited while traversing tree") 
    }

    /**
    expression -> arithmeticExpression
    */
    fun visit_expression_1(node: ASTNode.InnerNode<PrefixGrammarInfo.expression>): R {
        throw IllegalStateException("Unexpected expansion ${node.getToken()} -> ${node.getExpansion()} visited while traversing tree") 
    }

    fun visit_logicalBinop(node: ASTNode.InnerNode<PrefixGrammarInfo.logicalBinop>): R {
        return when (val id = node.getExpansion().getId()) {
            0 -> visit_logicalBinop_0(node)
            1 -> visit_logicalBinop_1(node)
            2 -> visit_logicalBinop_2(node)
            else -> throw IllegalStateException("Unexpected expansion id $id in expansion of logicalBinop")
        }
    }

    /**
    logicalBinop -> AND
    */
    fun visit_logicalBinop_0(node: ASTNode.InnerNode<PrefixGrammarInfo.logicalBinop>): R {
        throw IllegalStateException("Unexpected expansion ${node.getToken()} -> ${node.getExpansion()} visited while traversing tree") 
    }

    /**
    logicalBinop -> OR
    */
    fun visit_logicalBinop_1(node: ASTNode.InnerNode<PrefixGrammarInfo.logicalBinop>): R {
        throw IllegalStateException("Unexpected expansion ${node.getToken()} -> ${node.getExpansion()} visited while traversing tree") 
    }

    /**
    logicalBinop -> XOR
    */
    fun visit_logicalBinop_2(node: ASTNode.InnerNode<PrefixGrammarInfo.logicalBinop>): R {
        throw IllegalStateException("Unexpected expansion ${node.getToken()} -> ${node.getExpansion()} visited while traversing tree") 
    }

    /**
    logicalUnop -> NOT
    */
    fun visit_logicalUnop(node: ASTNode.InnerNode<PrefixGrammarInfo.logicalUnop>): R {
        throw IllegalStateException("Unexpected expansion ${node.getToken()} -> ${node.getExpansion()} visited while traversing tree")
    }

    fun visit_logicalExpression(node: ASTNode.InnerNode<PrefixGrammarInfo.logicalExpression>): R {
        return when (val id = node.getExpansion().getId()) {
            0 -> visit_logicalExpression_0(node)
            1 -> visit_logicalExpression_1(node)
            2 -> visit_logicalExpression_2(node)
            else -> throw IllegalStateException("Unexpected expansion id $id in expansion of logicalExpression")
        }
    }

    /**
    logicalExpression -> logicalBinop logicalExpression logicalExpression
    */
    fun visit_logicalExpression_0(node: ASTNode.InnerNode<PrefixGrammarInfo.logicalExpression>): R {
        throw IllegalStateException("Unexpected expansion ${node.getToken()} -> ${node.getExpansion()} visited while traversing tree") 
    }

    /**
    logicalExpression -> logicalUnop logicalExpression
    */
    fun visit_logicalExpression_1(node: ASTNode.InnerNode<PrefixGrammarInfo.logicalExpression>): R {
        throw IllegalStateException("Unexpected expansion ${node.getToken()} -> ${node.getExpansion()} visited while traversing tree") 
    }

    /**
    logicalExpression -> logicalAtom
    */
    fun visit_logicalExpression_2(node: ASTNode.InnerNode<PrefixGrammarInfo.logicalExpression>): R {
        throw IllegalStateException("Unexpected expansion ${node.getToken()} -> ${node.getExpansion()} visited while traversing tree") 
    }

    fun visit_logicalAtom(node: ASTNode.InnerNode<PrefixGrammarInfo.logicalAtom>): R {
        return when (val id = node.getExpansion().getId()) {
            0 -> visit_logicalAtom_0(node)
            1 -> visit_logicalAtom_1(node)
            else -> throw IllegalStateException("Unexpected expansion id $id in expansion of logicalAtom")
        }
    }

    /**
    logicalAtom -> VAR
    */
    fun visit_logicalAtom_0(node: ASTNode.InnerNode<PrefixGrammarInfo.logicalAtom>): R {
        throw IllegalStateException("Unexpected expansion ${node.getToken()} -> ${node.getExpansion()} visited while traversing tree") 
    }

    /**
    logicalAtom -> comparison
    */
    fun visit_logicalAtom_1(node: ASTNode.InnerNode<PrefixGrammarInfo.logicalAtom>): R {
        throw IllegalStateException("Unexpected expansion ${node.getToken()} -> ${node.getExpansion()} visited while traversing tree") 
    }

    fun visit_relation(node: ASTNode.InnerNode<PrefixGrammarInfo.relation>): R {
        return when (val id = node.getExpansion().getId()) {
            0 -> visit_relation_0(node)
            1 -> visit_relation_1(node)
            2 -> visit_relation_2(node)
            3 -> visit_relation_3(node)
            4 -> visit_relation_4(node)
            5 -> visit_relation_5(node)
            else -> throw IllegalStateException("Unexpected expansion id $id in expansion of relation")
        }
    }

    /**
    relation -> EQ
    */
    fun visit_relation_0(node: ASTNode.InnerNode<PrefixGrammarInfo.relation>): R {
        throw IllegalStateException("Unexpected expansion ${node.getToken()} -> ${node.getExpansion()} visited while traversing tree") 
    }

    /**
    relation -> NE
    */
    fun visit_relation_1(node: ASTNode.InnerNode<PrefixGrammarInfo.relation>): R {
        throw IllegalStateException("Unexpected expansion ${node.getToken()} -> ${node.getExpansion()} visited while traversing tree") 
    }

    /**
    relation -> GT
    */
    fun visit_relation_2(node: ASTNode.InnerNode<PrefixGrammarInfo.relation>): R {
        throw IllegalStateException("Unexpected expansion ${node.getToken()} -> ${node.getExpansion()} visited while traversing tree") 
    }

    /**
    relation -> GE
    */
    fun visit_relation_3(node: ASTNode.InnerNode<PrefixGrammarInfo.relation>): R {
        throw IllegalStateException("Unexpected expansion ${node.getToken()} -> ${node.getExpansion()} visited while traversing tree") 
    }

    /**
    relation -> LT
    */
    fun visit_relation_4(node: ASTNode.InnerNode<PrefixGrammarInfo.relation>): R {
        throw IllegalStateException("Unexpected expansion ${node.getToken()} -> ${node.getExpansion()} visited while traversing tree") 
    }

    /**
    relation -> LE
    */
    fun visit_relation_5(node: ASTNode.InnerNode<PrefixGrammarInfo.relation>): R {
        throw IllegalStateException("Unexpected expansion ${node.getToken()} -> ${node.getExpansion()} visited while traversing tree") 
    }

    /**
    comparison -> relation arithmeticExpression arithmeticExpression
    */
    fun visit_comparison(node: ASTNode.InnerNode<PrefixGrammarInfo.comparison>): R {
        throw IllegalStateException("Unexpected expansion ${node.getToken()} -> ${node.getExpansion()} visited while traversing tree")
    }

    fun visit_arithmeticBinop(node: ASTNode.InnerNode<PrefixGrammarInfo.arithmeticBinop>): R {
        return when (val id = node.getExpansion().getId()) {
            0 -> visit_arithmeticBinop_0(node)
            1 -> visit_arithmeticBinop_1(node)
            2 -> visit_arithmeticBinop_2(node)
            3 -> visit_arithmeticBinop_3(node)
            else -> throw IllegalStateException("Unexpected expansion id $id in expansion of arithmeticBinop")
        }
    }

    /**
    arithmeticBinop -> PLUS
    */
    fun visit_arithmeticBinop_0(node: ASTNode.InnerNode<PrefixGrammarInfo.arithmeticBinop>): R {
        throw IllegalStateException("Unexpected expansion ${node.getToken()} -> ${node.getExpansion()} visited while traversing tree") 
    }

    /**
    arithmeticBinop -> MINUS
    */
    fun visit_arithmeticBinop_1(node: ASTNode.InnerNode<PrefixGrammarInfo.arithmeticBinop>): R {
        throw IllegalStateException("Unexpected expansion ${node.getToken()} -> ${node.getExpansion()} visited while traversing tree") 
    }

    /**
    arithmeticBinop -> TIMES
    */
    fun visit_arithmeticBinop_2(node: ASTNode.InnerNode<PrefixGrammarInfo.arithmeticBinop>): R {
        throw IllegalStateException("Unexpected expansion ${node.getToken()} -> ${node.getExpansion()} visited while traversing tree") 
    }

    /**
    arithmeticBinop -> DIV
    */
    fun visit_arithmeticBinop_3(node: ASTNode.InnerNode<PrefixGrammarInfo.arithmeticBinop>): R {
        throw IllegalStateException("Unexpected expansion ${node.getToken()} -> ${node.getExpansion()} visited while traversing tree") 
    }

    fun visit_arithmeticExpression(node: ASTNode.InnerNode<PrefixGrammarInfo.arithmeticExpression>): R {
        return when (val id = node.getExpansion().getId()) {
            0 -> visit_arithmeticExpression_0(node)
            1 -> visit_arithmeticExpression_1(node)
            else -> throw IllegalStateException("Unexpected expansion id $id in expansion of arithmeticExpression")
        }
    }

    /**
    arithmeticExpression -> arithmeticBinop arithmeticExpression arithmeticExpression
    */
    fun visit_arithmeticExpression_0(node: ASTNode.InnerNode<PrefixGrammarInfo.arithmeticExpression>): R {
        throw IllegalStateException("Unexpected expansion ${node.getToken()} -> ${node.getExpansion()} visited while traversing tree") 
    }

    /**
    arithmeticExpression -> arithmeticAtom
    */
    fun visit_arithmeticExpression_1(node: ASTNode.InnerNode<PrefixGrammarInfo.arithmeticExpression>): R {
        throw IllegalStateException("Unexpected expansion ${node.getToken()} -> ${node.getExpansion()} visited while traversing tree") 
    }

    fun visit_arithmeticAtom(node: ASTNode.InnerNode<PrefixGrammarInfo.arithmeticAtom>): R {
        return when (val id = node.getExpansion().getId()) {
            0 -> visit_arithmeticAtom_0(node)
            1 -> visit_arithmeticAtom_1(node)
            else -> throw IllegalStateException("Unexpected expansion id $id in expansion of arithmeticAtom")
        }
    }

    /**
    arithmeticAtom -> VAR
    */
    fun visit_arithmeticAtom_0(node: ASTNode.InnerNode<PrefixGrammarInfo.arithmeticAtom>): R {
        throw IllegalStateException("Unexpected expansion ${node.getToken()} -> ${node.getExpansion()} visited while traversing tree") 
    }

    /**
    arithmeticAtom -> UINT
    */
    fun visit_arithmeticAtom_1(node: ASTNode.InnerNode<PrefixGrammarInfo.arithmeticAtom>): R {
        throw IllegalStateException("Unexpected expansion ${node.getToken()} -> ${node.getExpansion()} visited while traversing tree") 
    }

}