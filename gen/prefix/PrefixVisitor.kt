/**
This code is generated by [translate.codegen.VisitorBuilder] derived from [translate.meta.MetaVisitorBase] 
generated by [translate.codegen.VisitorBaseBuilder]
basing on grammar description [prefix.PrefixGrammarInfo] derived from [translate.codegen.helpers.GrammarInfo]
*/

package prefix

import grammar.token.Token
import grammar.Grammar
import grammar.Expansion
import utils.Beautifier

import structure.ASTNode
import structure.Visitor

import prefix.PrefixGrammarInfo

@Suppress("UNCHECKED_CAST")
object PrefixVisitor : Visitor<PrefixData, PrefixData> {

/*
Start: main
main -> code
code -> codeBlock code | <eps>
codeBlock -> statement | ifBlock | forBlock | PASS
statement -> print | assignment
print -> PRINTW arithmeticExpression
assignment -> ASSIGN VAR expression
ifBlock -> IFW logicalExpression innerBody innerBody
forBlock -> FORW VAR arithmeticAtom arithmeticAtom innerBody
innerBody -> codeBlock | BOTH codeBlock innerBody
expression -> logicalExpression | arithmeticExpression
logicalBinop -> AND | OR | XOR
logicalUnop -> NOT
logicalExpression -> logicalBinop logicalExpression logicalExpression | logicalUnop logicalExpression | logicalAtom
logicalAtom -> VAR | comparison
relation -> EQ | NE | GT | GE | LT | LE
comparison -> relation arithmeticExpression arithmeticExpression
arithmeticBinop -> PLUS | MINUS | TIMES | DIV
arithmeticExpression -> arithmeticBinop arithmeticExpression arithmeticExpression | arithmeticAtom
arithmeticAtom -> VAR | UINT
*/

    override fun <T : Token> collect(root: ASTNode<T>): PrefixData {
        return visit(root, PrefixData())
    }


    fun <T : Token> visitTerminal(token: T): PrefixData {
        return PrefixData()
    }

    override fun visit(node: ASTNode<out Token>, value: PrefixData): PrefixData {
        return when(node.getToken()) {
            PrefixGrammarInfo.WHITESPACE -> visit_WHITESPACE(node as ASTNode.TerminalNode<Token.VariantToken.VariantInstanceToken<PrefixGrammarInfo.WHITESPACE>>, value)
            PrefixGrammarInfo.IFW -> visit_IFW(node as ASTNode.TerminalNode<PrefixGrammarInfo.IFW>, value)
            PrefixGrammarInfo.FORW -> visit_FORW(node as ASTNode.TerminalNode<PrefixGrammarInfo.FORW>, value)
            PrefixGrammarInfo.PASS -> visit_PASS(node as ASTNode.TerminalNode<PrefixGrammarInfo.PASS>, value)
            PrefixGrammarInfo.BOTH -> visit_BOTH(node as ASTNode.TerminalNode<PrefixGrammarInfo.BOTH>, value)
            PrefixGrammarInfo.PRINTW -> visit_PRINTW(node as ASTNode.TerminalNode<PrefixGrammarInfo.PRINTW>, value)
            PrefixGrammarInfo.PLUS -> visit_PLUS(node as ASTNode.TerminalNode<PrefixGrammarInfo.PLUS>, value)
            PrefixGrammarInfo.MINUS -> visit_MINUS(node as ASTNode.TerminalNode<PrefixGrammarInfo.MINUS>, value)
            PrefixGrammarInfo.TIMES -> visit_TIMES(node as ASTNode.TerminalNode<PrefixGrammarInfo.TIMES>, value)
            PrefixGrammarInfo.DIV -> visit_DIV(node as ASTNode.TerminalNode<PrefixGrammarInfo.DIV>, value)
            PrefixGrammarInfo.GE -> visit_GE(node as ASTNode.TerminalNode<PrefixGrammarInfo.GE>, value)
            PrefixGrammarInfo.GT -> visit_GT(node as ASTNode.TerminalNode<PrefixGrammarInfo.GT>, value)
            PrefixGrammarInfo.LE -> visit_LE(node as ASTNode.TerminalNode<PrefixGrammarInfo.LE>, value)
            PrefixGrammarInfo.LT -> visit_LT(node as ASTNode.TerminalNode<PrefixGrammarInfo.LT>, value)
            PrefixGrammarInfo.EQ -> visit_EQ(node as ASTNode.TerminalNode<PrefixGrammarInfo.EQ>, value)
            PrefixGrammarInfo.NE -> visit_NE(node as ASTNode.TerminalNode<PrefixGrammarInfo.NE>, value)
            PrefixGrammarInfo.NOT -> visit_NOT(node as ASTNode.TerminalNode<PrefixGrammarInfo.NOT>, value)
            PrefixGrammarInfo.XOR -> visit_XOR(node as ASTNode.TerminalNode<PrefixGrammarInfo.XOR>, value)
            PrefixGrammarInfo.AND -> visit_AND(node as ASTNode.TerminalNode<PrefixGrammarInfo.AND>, value)
            PrefixGrammarInfo.OR -> visit_OR(node as ASTNode.TerminalNode<PrefixGrammarInfo.OR>, value)
            PrefixGrammarInfo.ASSIGN -> visit_ASSIGN(node as ASTNode.TerminalNode<PrefixGrammarInfo.ASSIGN>, value)
            PrefixGrammarInfo.VAR -> visit_VAR(node as ASTNode.TerminalNode<Token.VariantToken.VariantInstanceToken<PrefixGrammarInfo.VAR>>, value)
            PrefixGrammarInfo.UINT -> visit_UINT(node as ASTNode.TerminalNode<Token.VariantToken.VariantInstanceToken<PrefixGrammarInfo.UINT>>, value)
            PrefixGrammarInfo.main -> visit_main(node as ASTNode.InnerNode<PrefixGrammarInfo.main>, value)
            PrefixGrammarInfo.code -> visit_code(node as ASTNode.InnerNode<PrefixGrammarInfo.code>, value)
            PrefixGrammarInfo.codeBlock -> visit_codeBlock(node as ASTNode.InnerNode<PrefixGrammarInfo.codeBlock>, value)
            PrefixGrammarInfo.statement -> visit_statement(node as ASTNode.InnerNode<PrefixGrammarInfo.statement>, value)
            PrefixGrammarInfo.print -> visit_print(node as ASTNode.InnerNode<PrefixGrammarInfo.print>, value)
            PrefixGrammarInfo.assignment -> visit_assignment(node as ASTNode.InnerNode<PrefixGrammarInfo.assignment>, value)
            PrefixGrammarInfo.ifBlock -> visit_ifBlock(node as ASTNode.InnerNode<PrefixGrammarInfo.ifBlock>, value)
            PrefixGrammarInfo.forBlock -> visit_forBlock(node as ASTNode.InnerNode<PrefixGrammarInfo.forBlock>, value)
            PrefixGrammarInfo.innerBody -> visit_innerBody(node as ASTNode.InnerNode<PrefixGrammarInfo.innerBody>, value)
            PrefixGrammarInfo.expression -> visit_expression(node as ASTNode.InnerNode<PrefixGrammarInfo.expression>, value)
            PrefixGrammarInfo.logicalBinop -> visit_logicalBinop(node as ASTNode.InnerNode<PrefixGrammarInfo.logicalBinop>, value)
            PrefixGrammarInfo.logicalUnop -> visit_logicalUnop(node as ASTNode.InnerNode<PrefixGrammarInfo.logicalUnop>, value)
            PrefixGrammarInfo.logicalExpression -> visit_logicalExpression(node as ASTNode.InnerNode<PrefixGrammarInfo.logicalExpression>, value)
            PrefixGrammarInfo.logicalAtom -> visit_logicalAtom(node as ASTNode.InnerNode<PrefixGrammarInfo.logicalAtom>, value)
            PrefixGrammarInfo.relation -> visit_relation(node as ASTNode.InnerNode<PrefixGrammarInfo.relation>, value)
            PrefixGrammarInfo.comparison -> visit_comparison(node as ASTNode.InnerNode<PrefixGrammarInfo.comparison>, value)
            PrefixGrammarInfo.arithmeticBinop -> visit_arithmeticBinop(node as ASTNode.InnerNode<PrefixGrammarInfo.arithmeticBinop>, value)
            PrefixGrammarInfo.arithmeticExpression -> visit_arithmeticExpression(node as ASTNode.InnerNode<PrefixGrammarInfo.arithmeticExpression>, value)
            PrefixGrammarInfo.arithmeticAtom -> visit_arithmeticAtom(node as ASTNode.InnerNode<PrefixGrammarInfo.arithmeticAtom>, value)
            else -> throw IllegalStateException("Unknown token ${node.getToken()} met")
        }
    }

    fun visit_WHITESPACE(node: ASTNode.TerminalNode<Token.VariantToken.VariantInstanceToken<PrefixGrammarInfo.WHITESPACE>>, value: PrefixData): PrefixData {
        return visitTerminal(node.getToken()).also { it.text = node.getToken().getText() }
    }

    fun visit_IFW(node: ASTNode.TerminalNode<PrefixGrammarInfo.IFW>, value: PrefixData): PrefixData {
        return visitTerminal(node.getToken()).also { it.text = node.getToken().getText() }
    }

    fun visit_FORW(node: ASTNode.TerminalNode<PrefixGrammarInfo.FORW>, value: PrefixData): PrefixData {
        return visitTerminal(node.getToken()).also { it.text = node.getToken().getText() }
    }

    fun visit_PASS(node: ASTNode.TerminalNode<PrefixGrammarInfo.PASS>, value: PrefixData): PrefixData {
        return visitTerminal(node.getToken()).also { it.text = node.getToken().getText() }
    }

    fun visit_BOTH(node: ASTNode.TerminalNode<PrefixGrammarInfo.BOTH>, value: PrefixData): PrefixData {
        return visitTerminal(node.getToken()).also { it.text = node.getToken().getText() }
    }

    fun visit_PRINTW(node: ASTNode.TerminalNode<PrefixGrammarInfo.PRINTW>, value: PrefixData): PrefixData {
        return visitTerminal(node.getToken()).also { it.text = node.getToken().getText() }
    }

    fun visit_PLUS(node: ASTNode.TerminalNode<PrefixGrammarInfo.PLUS>, value: PrefixData): PrefixData {
        return visitTerminal(node.getToken()).also { it.text = node.getToken().getText() }
    }

    fun visit_MINUS(node: ASTNode.TerminalNode<PrefixGrammarInfo.MINUS>, value: PrefixData): PrefixData {
        return visitTerminal(node.getToken()).also { it.text = node.getToken().getText() }
    }

    fun visit_TIMES(node: ASTNode.TerminalNode<PrefixGrammarInfo.TIMES>, value: PrefixData): PrefixData {
        return visitTerminal(node.getToken()).also { it.text = node.getToken().getText() }
    }

    fun visit_DIV(node: ASTNode.TerminalNode<PrefixGrammarInfo.DIV>, value: PrefixData): PrefixData {
        return visitTerminal(node.getToken()).also { it.text = node.getToken().getText() }
    }

    fun visit_GE(node: ASTNode.TerminalNode<PrefixGrammarInfo.GE>, value: PrefixData): PrefixData {
        return visitTerminal(node.getToken()).also { it.text = node.getToken().getText() }
    }

    fun visit_GT(node: ASTNode.TerminalNode<PrefixGrammarInfo.GT>, value: PrefixData): PrefixData {
        return visitTerminal(node.getToken()).also { it.text = node.getToken().getText() }
    }

    fun visit_LE(node: ASTNode.TerminalNode<PrefixGrammarInfo.LE>, value: PrefixData): PrefixData {
        return visitTerminal(node.getToken()).also { it.text = node.getToken().getText() }
    }

    fun visit_LT(node: ASTNode.TerminalNode<PrefixGrammarInfo.LT>, value: PrefixData): PrefixData {
        return visitTerminal(node.getToken()).also { it.text = node.getToken().getText() }
    }

    fun visit_EQ(node: ASTNode.TerminalNode<PrefixGrammarInfo.EQ>, value: PrefixData): PrefixData {
        return visitTerminal(node.getToken()).also { it.text = node.getToken().getText() }
    }

    fun visit_NE(node: ASTNode.TerminalNode<PrefixGrammarInfo.NE>, value: PrefixData): PrefixData {
        return visitTerminal(node.getToken()).also { it.text = node.getToken().getText() }
    }

    fun visit_NOT(node: ASTNode.TerminalNode<PrefixGrammarInfo.NOT>, value: PrefixData): PrefixData {
        return visitTerminal(node.getToken()).also { it.text = node.getToken().getText() }
    }

    fun visit_XOR(node: ASTNode.TerminalNode<PrefixGrammarInfo.XOR>, value: PrefixData): PrefixData {
        return visitTerminal(node.getToken()).also { it.text = node.getToken().getText() }
    }

    fun visit_AND(node: ASTNode.TerminalNode<PrefixGrammarInfo.AND>, value: PrefixData): PrefixData {
        return visitTerminal(node.getToken()).also { it.text = node.getToken().getText() }
    }

    fun visit_OR(node: ASTNode.TerminalNode<PrefixGrammarInfo.OR>, value: PrefixData): PrefixData {
        return visitTerminal(node.getToken()).also { it.text = node.getToken().getText() }
    }

    fun visit_ASSIGN(node: ASTNode.TerminalNode<PrefixGrammarInfo.ASSIGN>, value: PrefixData): PrefixData {
        return visitTerminal(node.getToken()).also { it.text = node.getToken().getText() }
    }

    fun visit_VAR(node: ASTNode.TerminalNode<Token.VariantToken.VariantInstanceToken<PrefixGrammarInfo.VAR>>, value: PrefixData): PrefixData {
        return visitTerminal(node.getToken()).also { it.text = node.getToken().getText() }
    }

    fun visit_UINT(node: ASTNode.TerminalNode<Token.VariantToken.VariantInstanceToken<PrefixGrammarInfo.UINT>>, value: PrefixData): PrefixData {
        return visitTerminal(node.getToken()).also { it.text = node.getToken().getText() }
    }

    /**
    main -> code
    */
    fun visit_main(node: ASTNode.InnerNode<PrefixGrammarInfo.main>, value: PrefixData): PrefixData {
        val children = mutableListOf<PrefixData>()
        children.add(visit_code(node.getChild(0), PrefixData(depth = value.depth)))
        value.view = "fun main() {\n${children[0].view}\n}"
        return value
    }

    fun visit_code(node: ASTNode.InnerNode<PrefixGrammarInfo.code>, value: PrefixData): PrefixData {
        return when (val id = node.getExpansion().getId()) {
            0 -> visit_code_0(node, value)
            1 -> visit_code_1(node, value)
            else -> throw IllegalStateException("Unexpected expansion id $id in expansion of code")
        }
    }

    /**
    code -> codeBlock code
    */
    fun visit_code_0(node: ASTNode.InnerNode<PrefixGrammarInfo.code>, value: PrefixData): PrefixData {
        val children = mutableListOf<PrefixData>()
        children.add(visit_codeBlock(node.getChild(0), PrefixData(depth = 1)))
        children.add(visit_code(node.getChild(1), PrefixData(depth = value.depth)))
        value.view = "${children[0].view}${children[1].view}"
        return value
    }

    /**
    code -> <eps>
    */
    fun visit_code_1(node: ASTNode.InnerNode<PrefixGrammarInfo.code>, value: PrefixData): PrefixData {
        val children = mutableListOf<PrefixData>()

        value.view = ""
        return value
    }

    fun visit_codeBlock(node: ASTNode.InnerNode<PrefixGrammarInfo.codeBlock>, value: PrefixData): PrefixData {
        return when (val id = node.getExpansion().getId()) {
            0 -> visit_codeBlock_0(node, value)
            1 -> visit_codeBlock_1(node, value)
            2 -> visit_codeBlock_2(node, value)
            3 -> visit_codeBlock_3(node, value)
            else -> throw IllegalStateException("Unexpected expansion id $id in expansion of codeBlock")
        }
    }

    /**
    codeBlock -> statement
    */
    fun visit_codeBlock_0(node: ASTNode.InnerNode<PrefixGrammarInfo.codeBlock>, value: PrefixData): PrefixData {
        val children = mutableListOf<PrefixData>()
        children.add(visit_statement(node.getChild(0), PrefixData(depth = value.depth)))
        value.view = children[0].view
        return value
    }

    /**
    codeBlock -> ifBlock
    */
    fun visit_codeBlock_1(node: ASTNode.InnerNode<PrefixGrammarInfo.codeBlock>, value: PrefixData): PrefixData {
        val children = mutableListOf<PrefixData>()
        children.add(visit_ifBlock(node.getChild(0), PrefixData(depth = value.depth)))
        value.view = children[0].view
        return value
    }

    /**
    codeBlock -> forBlock
    */
    fun visit_codeBlock_2(node: ASTNode.InnerNode<PrefixGrammarInfo.codeBlock>, value: PrefixData): PrefixData {
        val children = mutableListOf<PrefixData>()
        children.add(visit_forBlock(node.getChild(0), PrefixData(depth = value.depth)))
        value.view = children[0].view
        return value
    }

    /**
    codeBlock -> PASS
    */
    fun visit_codeBlock_3(node: ASTNode.InnerNode<PrefixGrammarInfo.codeBlock>, value: PrefixData): PrefixData {
        val children = mutableListOf<PrefixData>()
        children.add(visit_PASS(node.getChild(0), PrefixData(depth = value.depth)))
        value.view = ""
        return value
    }

    fun visit_statement(node: ASTNode.InnerNode<PrefixGrammarInfo.statement>, value: PrefixData): PrefixData {
        return when (val id = node.getExpansion().getId()) {
            0 -> visit_statement_0(node, value)
            1 -> visit_statement_1(node, value)
            else -> throw IllegalStateException("Unexpected expansion id $id in expansion of statement")
        }
    }

    /**
    statement -> print
    */
    fun visit_statement_0(node: ASTNode.InnerNode<PrefixGrammarInfo.statement>, value: PrefixData): PrefixData {
        val children = mutableListOf<PrefixData>()
        children.add(visit_print(node.getChild(0), PrefixData(depth = value.depth)))
        value.view = "${value.tab}${children[0].view}"
        return value
    }

    /**
    statement -> assignment
    */
    fun visit_statement_1(node: ASTNode.InnerNode<PrefixGrammarInfo.statement>, value: PrefixData): PrefixData {
        val children = mutableListOf<PrefixData>()
        children.add(visit_assignment(node.getChild(0), PrefixData(depth = value.depth)))
        value.view = "${value.tab}${children[0].view}"
        return value
    }

    /**
    print -> PRINTW arithmeticExpression
    */
    fun visit_print(node: ASTNode.InnerNode<PrefixGrammarInfo.print>, value: PrefixData): PrefixData {
        val children = mutableListOf<PrefixData>()
        children.add(visit_PRINTW(node.getChild(0), PrefixData(depth = value.depth)))
        children.add(visit_arithmeticExpression(node.getChild(1), PrefixData(depth = value.depth)))
        value.view = "print(${children[1].view})\n"
        return value
    }

    /**
    assignment -> ASSIGN VAR expression
    */
    fun visit_assignment(node: ASTNode.InnerNode<PrefixGrammarInfo.assignment>, value: PrefixData): PrefixData {
        val children = mutableListOf<PrefixData>()
        children.add(visit_ASSIGN(node.getChild(0), PrefixData(depth = value.depth)))
        children.add(visit_VAR(node.getChild(1), PrefixData(depth = value.depth)))
        children.add(visit_expression(node.getChild(2), PrefixData(depth = value.depth)))
        value.view = "var ${children[1].text} = ${children[2].view}\n"
        return value
    }

    /**
    ifBlock -> IFW logicalExpression innerBody innerBody
    */
    fun visit_ifBlock(node: ASTNode.InnerNode<PrefixGrammarInfo.ifBlock>, value: PrefixData): PrefixData {
        val children = mutableListOf<PrefixData>()
        children.add(visit_IFW(node.getChild(0), PrefixData(depth = value.depth)))
        children.add(visit_logicalExpression(node.getChild(1), PrefixData(depth = value.depth)))
        children.add(visit_innerBody(node.getChild(2), PrefixData(depth = value.depth + 1)))
        children.add(visit_innerBody(node.getChild(3), PrefixData(depth = value.depth + 1)))
        value.view = "${value.tab}if (${children[1].view}) {\n${children[2].view}${value.tab}} else {\n${children[3].view}\n${value.tab}}"
        return value
    }

    /**
    forBlock -> FORW VAR arithmeticAtom arithmeticAtom innerBody
    */
    fun visit_forBlock(node: ASTNode.InnerNode<PrefixGrammarInfo.forBlock>, value: PrefixData): PrefixData {
        val children = mutableListOf<PrefixData>()
        children.add(visit_FORW(node.getChild(0), PrefixData(depth = value.depth)))
        children.add(visit_VAR(node.getChild(1), PrefixData(depth = value.depth)))
        children.add(visit_arithmeticAtom(node.getChild(2), PrefixData(depth = value.depth)))
        children.add(visit_arithmeticAtom(node.getChild(3), PrefixData(depth = value.depth)))
        children.add(visit_innerBody(node.getChild(4), PrefixData(depth = value.depth + 1)))
        value.view = "${value.tab}for (${children[1].text} in ${children[2].view}..${children[3].view}) {\n${children[4].view}\n${value.tab}}"
        return value
    }

    fun visit_innerBody(node: ASTNode.InnerNode<PrefixGrammarInfo.innerBody>, value: PrefixData): PrefixData {
        return when (val id = node.getExpansion().getId()) {
            0 -> visit_innerBody_0(node, value)
            1 -> visit_innerBody_1(node, value)
            else -> throw IllegalStateException("Unexpected expansion id $id in expansion of innerBody")
        }
    }

    /**
    innerBody -> codeBlock
    */
    fun visit_innerBody_0(node: ASTNode.InnerNode<PrefixGrammarInfo.innerBody>, value: PrefixData): PrefixData {
        val children = mutableListOf<PrefixData>()
        children.add(visit_codeBlock(node.getChild(0), PrefixData(depth = value.depth)))
        value.view = children[0].view
        return value
    }

    /**
    innerBody -> BOTH codeBlock innerBody
    */
    fun visit_innerBody_1(node: ASTNode.InnerNode<PrefixGrammarInfo.innerBody>, value: PrefixData): PrefixData {
        val children = mutableListOf<PrefixData>()
        children.add(visit_BOTH(node.getChild(0), PrefixData(depth = value.depth)))
        children.add(visit_codeBlock(node.getChild(1), PrefixData(depth = value.depth)))
        children.add(visit_innerBody(node.getChild(2), PrefixData(depth = value.depth)))
        value.view = "${children[1].view}${children[2].view}"
        return value
    }

    fun visit_expression(node: ASTNode.InnerNode<PrefixGrammarInfo.expression>, value: PrefixData): PrefixData {
        return when (val id = node.getExpansion().getId()) {
            0 -> visit_expression_0(node, value)
            1 -> visit_expression_1(node, value)
            else -> throw IllegalStateException("Unexpected expansion id $id in expansion of expression")
        }
    }

    /**
    expression -> logicalExpression
    */
    fun visit_expression_0(node: ASTNode.InnerNode<PrefixGrammarInfo.expression>, value: PrefixData): PrefixData {
        val children = mutableListOf<PrefixData>()
        children.add(visit_logicalExpression(node.getChild(0), PrefixData(depth = value.depth)))
        value.view = children[0].view
        return value
    }

    /**
    expression -> arithmeticExpression
    */
    fun visit_expression_1(node: ASTNode.InnerNode<PrefixGrammarInfo.expression>, value: PrefixData): PrefixData {
        val children = mutableListOf<PrefixData>()
        children.add(visit_arithmeticExpression(node.getChild(0), PrefixData(depth = value.depth)))
        value.view = children[0].view
        return value
    }

    fun visit_logicalBinop(node: ASTNode.InnerNode<PrefixGrammarInfo.logicalBinop>, value: PrefixData): PrefixData {
        return when (val id = node.getExpansion().getId()) {
            0 -> visit_logicalBinop_0(node, value)
            1 -> visit_logicalBinop_1(node, value)
            2 -> visit_logicalBinop_2(node, value)
            else -> throw IllegalStateException("Unexpected expansion id $id in expansion of logicalBinop")
        }
    }

    /**
    logicalBinop -> AND
    */
    fun visit_logicalBinop_0(node: ASTNode.InnerNode<PrefixGrammarInfo.logicalBinop>, value: PrefixData): PrefixData {
        val children = mutableListOf<PrefixData>()
        children.add(visit_AND(node.getChild(0), PrefixData(depth = value.depth)))
        value.view = children[0].text
        return value
    }

    /**
    logicalBinop -> OR
    */
    fun visit_logicalBinop_1(node: ASTNode.InnerNode<PrefixGrammarInfo.logicalBinop>, value: PrefixData): PrefixData {
        val children = mutableListOf<PrefixData>()
        children.add(visit_OR(node.getChild(0), PrefixData(depth = value.depth)))
        value.view = children[0].text
        return value
    }

    /**
    logicalBinop -> XOR
    */
    fun visit_logicalBinop_2(node: ASTNode.InnerNode<PrefixGrammarInfo.logicalBinop>, value: PrefixData): PrefixData {
        val children = mutableListOf<PrefixData>()
        children.add(visit_XOR(node.getChild(0), PrefixData(depth = value.depth)))
        value.view = children[0].text
        return value
    }

    /**
    logicalUnop -> NOT
    */
    fun visit_logicalUnop(node: ASTNode.InnerNode<PrefixGrammarInfo.logicalUnop>, value: PrefixData): PrefixData {
        val children = mutableListOf<PrefixData>()
        children.add(visit_NOT(node.getChild(0), PrefixData(depth = value.depth)))
        value.view = children[0].text
        return value
    }

    fun visit_logicalExpression(node: ASTNode.InnerNode<PrefixGrammarInfo.logicalExpression>, value: PrefixData): PrefixData {
        return when (val id = node.getExpansion().getId()) {
            0 -> visit_logicalExpression_0(node, value)
            1 -> visit_logicalExpression_1(node, value)
            2 -> visit_logicalExpression_2(node, value)
            else -> throw IllegalStateException("Unexpected expansion id $id in expansion of logicalExpression")
        }
    }

    /**
    logicalExpression -> logicalBinop logicalExpression logicalExpression
    */
    fun visit_logicalExpression_0(node: ASTNode.InnerNode<PrefixGrammarInfo.logicalExpression>, value: PrefixData): PrefixData {
        val children = mutableListOf<PrefixData>()
        children.add(visit_logicalBinop(node.getChild(0), PrefixData(depth = value.depth)))
        children.add(visit_logicalExpression(node.getChild(1), PrefixData(depth = value.depth)))
        children.add(visit_logicalExpression(node.getChild(2), PrefixData(depth = value.depth)))
        value.view = "(${children[1].view} ${children[0].view} ${children[2].view})"
        return value
    }

    /**
    logicalExpression -> logicalUnop logicalExpression
    */
    fun visit_logicalExpression_1(node: ASTNode.InnerNode<PrefixGrammarInfo.logicalExpression>, value: PrefixData): PrefixData {
        val children = mutableListOf<PrefixData>()
        children.add(visit_logicalUnop(node.getChild(0), PrefixData(depth = value.depth)))
        children.add(visit_logicalExpression(node.getChild(1), PrefixData(depth = value.depth)))
        value.view = "${children[0].view}${children[1].view}"
        return value
    }

    /**
    logicalExpression -> logicalAtom
    */
    fun visit_logicalExpression_2(node: ASTNode.InnerNode<PrefixGrammarInfo.logicalExpression>, value: PrefixData): PrefixData {
        val children = mutableListOf<PrefixData>()
        children.add(visit_logicalAtom(node.getChild(0), PrefixData(depth = value.depth)))
        value.view = children[0].view
        return value
    }

    fun visit_logicalAtom(node: ASTNode.InnerNode<PrefixGrammarInfo.logicalAtom>, value: PrefixData): PrefixData {
        return when (val id = node.getExpansion().getId()) {
            0 -> visit_logicalAtom_0(node, value)
            1 -> visit_logicalAtom_1(node, value)
            else -> throw IllegalStateException("Unexpected expansion id $id in expansion of logicalAtom")
        }
    }

    /**
    logicalAtom -> VAR
    */
    fun visit_logicalAtom_0(node: ASTNode.InnerNode<PrefixGrammarInfo.logicalAtom>, value: PrefixData): PrefixData {
        val children = mutableListOf<PrefixData>()
        children.add(visit_VAR(node.getChild(0), PrefixData(depth = value.depth)))
        value.view = children[0].text
        return value
    }

    /**
    logicalAtom -> comparison
    */
    fun visit_logicalAtom_1(node: ASTNode.InnerNode<PrefixGrammarInfo.logicalAtom>, value: PrefixData): PrefixData {
        val children = mutableListOf<PrefixData>()
        children.add(visit_comparison(node.getChild(0), PrefixData(depth = value.depth)))
        value.view = children[0].view
        return value
    }

    fun visit_relation(node: ASTNode.InnerNode<PrefixGrammarInfo.relation>, value: PrefixData): PrefixData {
        return when (val id = node.getExpansion().getId()) {
            0 -> visit_relation_0(node, value)
            1 -> visit_relation_1(node, value)
            2 -> visit_relation_2(node, value)
            3 -> visit_relation_3(node, value)
            4 -> visit_relation_4(node, value)
            5 -> visit_relation_5(node, value)
            else -> throw IllegalStateException("Unexpected expansion id $id in expansion of relation")
        }
    }

    /**
    relation -> EQ
    */
    fun visit_relation_0(node: ASTNode.InnerNode<PrefixGrammarInfo.relation>, value: PrefixData): PrefixData {
        val children = mutableListOf<PrefixData>()
        children.add(visit_EQ(node.getChild(0), PrefixData(depth = value.depth)))
        value.view = children[0].text
        return value
    }

    /**
    relation -> NE
    */
    fun visit_relation_1(node: ASTNode.InnerNode<PrefixGrammarInfo.relation>, value: PrefixData): PrefixData {
        val children = mutableListOf<PrefixData>()
        children.add(visit_NE(node.getChild(0), PrefixData(depth = value.depth)))
        value.view = children[0].text
        return value
    }

    /**
    relation -> GT
    */
    fun visit_relation_2(node: ASTNode.InnerNode<PrefixGrammarInfo.relation>, value: PrefixData): PrefixData {
        val children = mutableListOf<PrefixData>()
        children.add(visit_GT(node.getChild(0), PrefixData(depth = value.depth)))
        value.view = children[0].text
        return value
    }

    /**
    relation -> GE
    */
    fun visit_relation_3(node: ASTNode.InnerNode<PrefixGrammarInfo.relation>, value: PrefixData): PrefixData {
        val children = mutableListOf<PrefixData>()
        children.add(visit_GE(node.getChild(0), PrefixData(depth = value.depth)))
        value.view = children[0].text
        return value
    }

    /**
    relation -> LT
    */
    fun visit_relation_4(node: ASTNode.InnerNode<PrefixGrammarInfo.relation>, value: PrefixData): PrefixData {
        val children = mutableListOf<PrefixData>()
        children.add(visit_LT(node.getChild(0), PrefixData(depth = value.depth)))
        value.view = children[0].text
        return value
    }

    /**
    relation -> LE
    */
    fun visit_relation_5(node: ASTNode.InnerNode<PrefixGrammarInfo.relation>, value: PrefixData): PrefixData {
        val children = mutableListOf<PrefixData>()
        children.add(visit_LE(node.getChild(0), PrefixData(depth = value.depth)))
        value.view = children[0].text
        return value
    }

    /**
    comparison -> relation arithmeticExpression arithmeticExpression
    */
    fun visit_comparison(node: ASTNode.InnerNode<PrefixGrammarInfo.comparison>, value: PrefixData): PrefixData {
        val children = mutableListOf<PrefixData>()
        children.add(visit_relation(node.getChild(0), PrefixData(depth = value.depth)))
        children.add(visit_arithmeticExpression(node.getChild(1), PrefixData(depth = value.depth)))
        children.add(visit_arithmeticExpression(node.getChild(2), PrefixData(depth = value.depth)))
        value.view = "(${children[1].view} ${children[0].view} ${children[2].view})"
        return value
    }

    fun visit_arithmeticBinop(node: ASTNode.InnerNode<PrefixGrammarInfo.arithmeticBinop>, value: PrefixData): PrefixData {
        return when (val id = node.getExpansion().getId()) {
            0 -> visit_arithmeticBinop_0(node, value)
            1 -> visit_arithmeticBinop_1(node, value)
            2 -> visit_arithmeticBinop_2(node, value)
            3 -> visit_arithmeticBinop_3(node, value)
            else -> throw IllegalStateException("Unexpected expansion id $id in expansion of arithmeticBinop")
        }
    }

    /**
    arithmeticBinop -> PLUS
    */
    fun visit_arithmeticBinop_0(node: ASTNode.InnerNode<PrefixGrammarInfo.arithmeticBinop>, value: PrefixData): PrefixData {
        val children = mutableListOf<PrefixData>()
        children.add(visit_PLUS(node.getChild(0), PrefixData(depth = value.depth)))
        value.view = children[0].text
        return value
    }

    /**
    arithmeticBinop -> MINUS
    */
    fun visit_arithmeticBinop_1(node: ASTNode.InnerNode<PrefixGrammarInfo.arithmeticBinop>, value: PrefixData): PrefixData {
        val children = mutableListOf<PrefixData>()
        children.add(visit_MINUS(node.getChild(0), PrefixData(depth = value.depth)))
        value.view = children[0].text
        return value
    }

    /**
    arithmeticBinop -> TIMES
    */
    fun visit_arithmeticBinop_2(node: ASTNode.InnerNode<PrefixGrammarInfo.arithmeticBinop>, value: PrefixData): PrefixData {
        val children = mutableListOf<PrefixData>()
        children.add(visit_TIMES(node.getChild(0), PrefixData(depth = value.depth)))
        value.view = children[0].text
        return value
    }

    /**
    arithmeticBinop -> DIV
    */
    fun visit_arithmeticBinop_3(node: ASTNode.InnerNode<PrefixGrammarInfo.arithmeticBinop>, value: PrefixData): PrefixData {
        val children = mutableListOf<PrefixData>()
        children.add(visit_DIV(node.getChild(0), PrefixData(depth = value.depth)))
        value.view = children[0].text
        return value
    }

    fun visit_arithmeticExpression(node: ASTNode.InnerNode<PrefixGrammarInfo.arithmeticExpression>, value: PrefixData): PrefixData {
        return when (val id = node.getExpansion().getId()) {
            0 -> visit_arithmeticExpression_0(node, value)
            1 -> visit_arithmeticExpression_1(node, value)
            else -> throw IllegalStateException("Unexpected expansion id $id in expansion of arithmeticExpression")
        }
    }

    /**
    arithmeticExpression -> arithmeticBinop arithmeticExpression arithmeticExpression
    */
    fun visit_arithmeticExpression_0(node: ASTNode.InnerNode<PrefixGrammarInfo.arithmeticExpression>, value: PrefixData): PrefixData {
        val children = mutableListOf<PrefixData>()
        children.add(visit_arithmeticBinop(node.getChild(0), PrefixData(depth = value.depth)))
        children.add(visit_arithmeticExpression(node.getChild(1), PrefixData(depth = value.depth)))
        children.add(visit_arithmeticExpression(node.getChild(2), PrefixData(depth = value.depth)))
        value.view = "(${children[1].view} ${children[0].view} ${children[2].view})"
        return value
    }

    /**
    arithmeticExpression -> arithmeticAtom
    */
    fun visit_arithmeticExpression_1(node: ASTNode.InnerNode<PrefixGrammarInfo.arithmeticExpression>, value: PrefixData): PrefixData {
        val children = mutableListOf<PrefixData>()
        children.add(visit_arithmeticAtom(node.getChild(0), PrefixData(depth = value.depth)))
        value.view = children[0].view
        return value
    }

    fun visit_arithmeticAtom(node: ASTNode.InnerNode<PrefixGrammarInfo.arithmeticAtom>, value: PrefixData): PrefixData {
        return when (val id = node.getExpansion().getId()) {
            0 -> visit_arithmeticAtom_0(node, value)
            1 -> visit_arithmeticAtom_1(node, value)
            else -> throw IllegalStateException("Unexpected expansion id $id in expansion of arithmeticAtom")
        }
    }

    /**
    arithmeticAtom -> VAR
    */
    fun visit_arithmeticAtom_0(node: ASTNode.InnerNode<PrefixGrammarInfo.arithmeticAtom>, value: PrefixData): PrefixData {
        val children = mutableListOf<PrefixData>()
        children.add(visit_VAR(node.getChild(0), PrefixData(depth = value.depth)))
        value.view = children[0].text
        return value
    }

    /**
    arithmeticAtom -> UINT
    */
    fun visit_arithmeticAtom_1(node: ASTNode.InnerNode<PrefixGrammarInfo.arithmeticAtom>, value: PrefixData): PrefixData {
        val children = mutableListOf<PrefixData>()
        children.add(visit_UINT(node.getChild(0), PrefixData(depth = value.depth)))
        value.view = children[0].text
        return value
    }

}